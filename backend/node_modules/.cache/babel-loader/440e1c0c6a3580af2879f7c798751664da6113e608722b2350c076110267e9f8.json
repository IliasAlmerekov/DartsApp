{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilias.almerekov\\\\Projects\\\\darts\\\\src\\\\pages\\\\Game\\\\Game.tsx\",\n  _s = $RefreshSig$();\nimport Keyboard from \"../../components/Keyboard/Keyboard\";\nimport \"./game.css\";\nimport Back from \"../../icons/back.svg\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport GamePlayerItemList from \"../../components/GamePlayerItem/GamplayerItemList\";\nimport Overlay from \"../../components/Overlay/Overlay\";\nimport Button from \"../../components/Button/Button\";\nimport NumberButton from \"../../components/Keyboard/NumberButton\";\nimport FinishedGamePlayerItemList from \"../../components/GamePlayerItem/FinishedGamePlayerItemList\";\nimport LinkButton from \"../../components/LinkButton/LinkButton\";\nimport Undo from '../../icons/undo-copy.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Game({\n  players,\n  setWinnerList,\n  undoFromSummary,\n  setUndoFromSummary,\n  setLastHistory,\n  lastHistory\n}) {\n  _s();\n  var _playerList$playerTur, _playerList$playerTur2, _playerList$playerTur3;\n  const navigate = useNavigate();\n  const [playerScore, setPlayerScore] = useState(301);\n  const [roundsCount, setRoundsCount] = useState(1);\n  const [playerList, setPlayerList] = useState([]);\n  const [throwCount, setThrowCount] = useState(0);\n  const [playerTurn, setPlayerTurn] = useState(0);\n  const [isOverlayOpen, setIsOverlayOpen] = useState(false);\n  const [history, setHistory] = useState([]);\n  const [finishedPlayerList, setFinishedPlayerList] = useState([]);\n  function initializePlayerList(players, playerScore) {\n    return players.map((player, index) => ({\n      id: user.id,\n      name: user.name,\n      score: playerScore,\n      isActive: i === 0 ? true : false,\n      index: i,\n      rounds: [{\n        throw1: undefined,\n        throw2: undefined,\n        throw3: undefined\n      }],\n      isPlaying: true,\n      isBust: false,\n      throwCount: 0\n    }));\n  }\n  /*\r\n  function initializePlayerList() {\r\n      const initialPlayerlist: BASIC.PlayerProps[] = [];\r\n      players.forEach((user: BASIC.UserProps, i: number) => {\r\n          const player = {\r\n              id: user.id,\r\n              name: user.name,\r\n              score: playerScore,\r\n              isActive: i === 0 ? true : false,\r\n              index: i,\r\n              rounds: [{ throw1: undefined, throw2: undefined, throw3: undefined }],\r\n              isPlaying: true,\r\n              isBust: false,\r\n              throwCount: 0,\r\n          };\r\n          initialPlayerlist.push(player);\r\n      });\r\n      setPlayerList(initialPlayerlist);\r\n  }\r\n  */\n  function changeActivePlayer() {\n    const prevPlayerTurnIndex = playerTurn;\n    const newPlayerTurnIndex = playerTurn + 1;\n    const newPlayerList = [...playerList];\n    newPlayerList[prevPlayerTurnIndex].isActive = false;\n    const isEndOfArray = newPlayerTurnIndex > newPlayerList.length - 1;\n    const handleNewIndex = isEndOfArray ? 0 : newPlayerTurnIndex;\n    newPlayerList[handleNewIndex].isBust = false;\n    newPlayerList[handleNewIndex].isActive = true;\n    setPlayerList(newPlayerList);\n    setPlayerTurn(handleNewIndex);\n    setThrowCount(0);\n    if (isEndOfArray) {\n      setRoundsCount(roundsCount + 1);\n      newPlayerList.forEach(player => {\n        return player.rounds.push({\n          throw1: undefined,\n          throw2: undefined,\n          throw3: undefined\n        });\n      });\n    }\n  }\n  function playSound(path) {\n    var audio = new Audio(path);\n    audio.play();\n    if (path === '/sounds/throw-sound.mp3') {\n      audio.currentTime = 2.3;\n    } else if (path === '/sounds/undo-sound.mp3') {\n      audio.currentTime = 0.2;\n      audio.volume = 0.1;\n    }\n  }\n  function handleThrow(player, currentThrow, currentScoreAchieved) {\n    setHistory([...history, {\n      finishedPlayerList: JSON.parse(JSON.stringify(finishedPlayerList)),\n      playerList: JSON.parse(JSON.stringify(playerList)),\n      playerScore,\n      throwCount,\n      playerTurn,\n      roundsCount\n    }]);\n    const newScore = playerList[playerTurn].score - currentScoreAchieved;\n    const currentPlayerThrows = playerList[playerTurn].rounds[playerList[playerTurn].rounds.length - 1];\n    switch (currentThrow) {\n      case 0:\n        currentPlayerThrows.throw1 = currentScoreAchieved;\n        break;\n      case 1:\n        currentPlayerThrows.throw2 = currentScoreAchieved;\n        break;\n      case 2:\n        currentPlayerThrows.throw3 = currentScoreAchieved;\n        break;\n      default:\n    }\n    setPlayerScore(newScore);\n    if (currentScoreAchieved > playerList[playerTurn].score) {\n      bust(playerScore);\n      playSound('/sounds/error-sound.mp3');\n    } else {\n      playerList[playerTurn].score = newScore;\n      setThrowCount(currentThrow + 1);\n      playSound('/sounds/throw-sound.mp3');\n    }\n    if (playerList[playerTurn].score === 0) {\n      if (playerList.length === 2) {\n        handleLastPlayer();\n        return finishedPlayerList;\n      } else if (finishedPlayerList.length < 1) {\n        setIsOverlayOpen(true);\n        playSound('/sounds/win-sound.mp3');\n      } else {\n        handleFinishedPlayer();\n        return playerList;\n      }\n      setWinnerList(finishedPlayerList);\n    }\n    const updatedPlayerlist = [...playerList];\n    updatedPlayerlist[playerTurn] = player;\n    setPlayerList(updatedPlayerlist);\n    playerList[playerTurn].throwCount = throwCount;\n  }\n  function bust(bustedPlayerScore) {\n    const currentRoundOfPlayer = playerList[playerTurn].rounds[roundsCount - 1];\n    const firstThrow = currentRoundOfPlayer.throw1;\n    const secondThrow = currentRoundOfPlayer.throw2;\n    const thirdThrow = currentRoundOfPlayer.throw3;\n    let oldThrowScore = playerList[playerTurn].score;\n    playerList[playerTurn].isBust = true;\n    if (thirdThrow) {\n      let firstAndSecondThrowScore = 0;\n      if (firstThrow !== undefined && secondThrow !== undefined) {\n        firstAndSecondThrowScore = firstThrow + secondThrow;\n      }\n      oldThrowScore = firstAndSecondThrowScore + bustedPlayerScore;\n    } else if (firstThrow !== undefined && secondThrow !== undefined && secondThrow > playerList[playerTurn].score) {\n      oldThrowScore = firstThrow + bustedPlayerScore;\n    }\n    playerList[playerTurn].score = oldThrowScore;\n    changeActivePlayer();\n  }\n  function handleFinishedPlayer() {\n    playerList[playerTurn].isPlaying = false;\n    const finishedPlayer = playerList.filter(player => player.isPlaying === false);\n    const finishedPlayers = finishedPlayerList;\n    finishedPlayers.push(finishedPlayer[0]);\n    const unfinishedPlayers = playerList.filter(player => player.isPlaying === true);\n    changeActivePlayer();\n    unfinishedPlayers[playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn].isActive = true;\n    setPlayerList(unfinishedPlayers);\n    setFinishedPlayerList(finishedPlayers);\n    setPlayerTurn(playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn);\n    setWinnerList(finishedPlayerList);\n  }\n  function handleLastPlayer() {\n    playerList[playerTurn].isPlaying = false;\n    const newList = [...finishedPlayerList];\n    const lastPlayer = playerList.filter(player => player.score !== 0);\n    const secondlastPlayer = playerList.filter(player => player.score == 0);\n    newList.push(secondlastPlayer[0], lastPlayer[0]);\n    setFinishedPlayerList(newList);\n  }\n  function sortPlayer() {\n    const scoreArray = [];\n    playerList.forEach(player => {\n      scoreArray.push(player.score);\n    });\n    allPlayersScoreSort(scoreArray);\n    let i = 0;\n    const newList = [...finishedPlayerList];\n    while (i < playerList.length) {\n      playerList.forEach(player => {\n        if (player.score === scoreArray[0]) {\n          scoreArray.splice(0, 1);\n          newList.push(player);\n        }\n      });\n      i += 1;\n    }\n    setFinishedPlayerList(newList);\n  }\n  function allPlayersScoreSort(arr) {\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n          let temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp;\n        }\n      }\n    }\n  }\n  function handleUndo() {\n    if (history.length > 0) {\n      const lastState = history.pop();\n      setFinishedPlayerList(lastState.finishedPlayerList);\n      setPlayerList(lastState.playerList);\n      setPlayerScore(lastState.playerScore);\n      setThrowCount(lastState.throwCount);\n      setPlayerTurn(lastState.playerTurn);\n      setRoundsCount(lastState.roundsCount);\n      setHistory([...history]);\n      playSound('/sounds/undo-sound.mp3');\n    }\n  }\n  useEffect(() => {\n    initializePlayerList();\n  }, []);\n  useEffect(() => {\n    if (throwCount === 3 && !isOverlayOpen) {\n      changeActivePlayer();\n    }\n  }, [throwCount]);\n  useEffect(() => {\n    if (finishedPlayerList.length === players.length) {\n      setWinnerList(finishedPlayerList);\n      setLastHistory(history);\n      navigate(\"/summary\");\n      if (players.length === 2) {\n        playSound('/sounds/win-sound.mp3');\n      }\n    }\n  }, [finishedPlayerList.length, players.length]);\n  useEffect(() => {\n    if (playerTurn === 5) {\n      const player = document.getElementById(\"playerid\");\n      player === null || player === void 0 ? void 0 : player.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    } else if (playerTurn + 1 === playerList.length) {\n      const player = document.getElementById(\"playerid\");\n      player === null || player === void 0 ? void 0 : player.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    } else if (playerTurn === 0) {\n      window.scroll({\n        top: 0,\n        behavior: \"smooth\"\n      });\n    }\n  }, [playerTurn, playerList.length]);\n  useEffect(() => {\n    if (undoFromSummary === true) {\n      setHistory(lastHistory);\n      setUndoFromSummary(false);\n      setUndoLastHistory(true);\n    }\n  }, [undoFromSummary]);\n  useEffect(() => {\n    if (undoLastHistory === true) {\n      handleUndo();\n      setUndoLastHistory(false);\n    }\n  }, [undoLastHistory]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Overlay, {\n      className: \"overlayBox\",\n      isOpen: isOverlayOpen,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finishGameOverlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"overlayHeading\",\n          children: \"Continue Game?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            label: \"Finish\",\n            isLink: true,\n            handleClick: () => sortPlayer(),\n            type: \"secondary\",\n            isInverted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            label: \"Continue\",\n            handleClick: () => {\n              handleFinishedPlayer();\n              setIsOverlayOpen(!isOverlayOpen);\n            },\n            type: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(LinkButton, {\n            icon: Undo,\n            label: \"Undo Throw\",\n            handleClick: () => {\n              setIsOverlayOpen(!isOverlayOpen);\n              handleUndo();\n            },\n            className: \"undoThrow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gamePageHeader\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"top\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Back,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gamePlayerItemContainer\",\n      children: [/*#__PURE__*/_jsxDEV(GamePlayerItemList, {\n        userMap: playerList,\n        score: (_playerList$playerTur = playerList[playerTurn]) === null || _playerList$playerTur === void 0 ? void 0 : _playerList$playerTur.score,\n        round: roundsCount,\n        isBust: (_playerList$playerTur2 = playerList[playerTurn]) === null || _playerList$playerTur2 === void 0 ? void 0 : _playerList$playerTur2.isBust,\n        throwCount: (_playerList$playerTur3 = playerList[playerTurn]) === null || _playerList$playerTur3 === void 0 ? void 0 : _playerList$playerTur3.throwCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FinishedGamePlayerItemList, {\n        userMap: finishedPlayerList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-and-undo\",\n      children: [/*#__PURE__*/_jsxDEV(NumberButton, {\n        value: \"Undo\",\n        handleClick: handleUndo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n        handleClick: value => handleThrow(playerList[playerTurn], throwCount, value),\n        isOverlayOpen: isOverlayOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"RxKmv++C5MZM4OSiqrkRtQmCcWA=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Keyboard","Back","Link","useNavigate","useEffect","useState","GamePlayerItemList","Overlay","Button","NumberButton","FinishedGamePlayerItemList","LinkButton","Undo","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","players","setWinnerList","undoFromSummary","setUndoFromSummary","setLastHistory","lastHistory","_s","_playerList$playerTur","_playerList$playerTur2","_playerList$playerTur3","navigate","playerScore","setPlayerScore","roundsCount","setRoundsCount","playerList","setPlayerList","throwCount","setThrowCount","playerTurn","setPlayerTurn","isOverlayOpen","setIsOverlayOpen","history","setHistory","finishedPlayerList","setFinishedPlayerList","initializePlayerList","map","player","index","id","user","name","score","isActive","i","rounds","throw1","undefined","throw2","throw3","isPlaying","isBust","changeActivePlayer","prevPlayerTurnIndex","newPlayerTurnIndex","newPlayerList","isEndOfArray","length","handleNewIndex","forEach","push","playSound","path","audio","Audio","play","currentTime","volume","handleThrow","currentThrow","currentScoreAchieved","JSON","parse","stringify","newScore","currentPlayerThrows","bust","handleLastPlayer","handleFinishedPlayer","updatedPlayerlist","bustedPlayerScore","currentRoundOfPlayer","firstThrow","secondThrow","thirdThrow","oldThrowScore","firstAndSecondThrowScore","finishedPlayer","filter","finishedPlayers","unfinishedPlayers","newList","lastPlayer","secondlastPlayer","sortPlayer","scoreArray","allPlayersScoreSort","splice","arr","j","temp","handleUndo","lastState","pop","document","getElementById","scrollIntoView","behavior","window","scroll","top","setUndoLastHistory","undoLastHistory","children","className","isOpen","fileName","_jsxFileName","lineNumber","columnNumber","label","isLink","handleClick","type","isInverted","icon","to","src","alt","userMap","round","value","_c","$RefreshReg$"],"sources":["C:/Users/ilias.almerekov/Projects/darts/src/pages/Game/Game.tsx"],"sourcesContent":["import Keyboard from \"../../components/Keyboard/Keyboard\";\r\nimport \"./game.css\";\r\nimport Back from \"../../icons/back.svg\";\r\nimport { Link, Navigate, redirect, useNavigate } from \"react-router-dom\";\r\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport GamePlayerItemList from \"../../components/GamePlayerItem/GamplayerItemList\";\r\nimport Overlay from \"../../components/Overlay/Overlay\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport NumberButton from \"../../components/Keyboard/NumberButton\";\r\nimport FinishedGamePlayerItemList from \"../../components/GamePlayerItem/FinishedGamePlayerItemList\";\r\nimport LinkButton from \"../../components/LinkButton/LinkButton\";\r\nimport Undo from '../../icons/undo-copy.svg'\r\nimport { PlayerProps } from \"../Start/Start\";\r\n\r\ntype Props = {\r\n    players: PlayerProps[]\r\n    setWinnerList: Dispatch<SetStateAction<BASIC.PlayerProps[]>>;\r\n    undoFromSummary: boolean;\r\n    setUndoFromSummary: Dispatch<SetStateAction<boolean>>\r\n    setLastHistory: Dispatch<SetStateAction<any>>\r\n    lastHistory: any;\r\n}\r\n\r\nfunction Game({ players, setWinnerList, undoFromSummary, setUndoFromSummary, setLastHistory, lastHistory }: Props) {\r\n    const navigate = useNavigate();\r\n    const [playerScore, setPlayerScore] = useState(301);\r\n    const [roundsCount, setRoundsCount] = useState(1);\r\n    const [playerList, setPlayerList] = useState<BASIC.PlayerProps[]>([]);\r\n    const [throwCount, setThrowCount] = useState(0);\r\n    const [playerTurn, setPlayerTurn] = useState(0);\r\n    const [isOverlayOpen, setIsOverlayOpen] = useState(false);\r\n    const [history, setHistory] = useState<any[]>([]);\r\n    const [finishedPlayerList, setFinishedPlayerList] = useState<BASIC.PlayerProps[]>([])\r\n    \r\n    function initializePlayerList(players: BASIC.UserProps[], playerScore: number): BASIC.PlayerProps[] {\r\n        return players.map((player, index) => ({\r\n            id: user.id,\r\n            name: user.name,\r\n            score: playerScore,\r\n            isActive: i === 0 ? true : false,\r\n            index: i,\r\n            rounds: [{ throw1: undefined, throw2: undefined, throw3: undefined }],\r\n            isPlaying: true,\r\n            isBust: false,\r\n            throwCount: 0,\r\n        }))\r\n    }\r\n    /*\r\n    function initializePlayerList() {\r\n        const initialPlayerlist: BASIC.PlayerProps[] = [];\r\n        players.forEach((user: BASIC.UserProps, i: number) => {\r\n            const player = {\r\n                id: user.id,\r\n                name: user.name,\r\n                score: playerScore,\r\n                isActive: i === 0 ? true : false,\r\n                index: i,\r\n                rounds: [{ throw1: undefined, throw2: undefined, throw3: undefined }],\r\n                isPlaying: true,\r\n                isBust: false,\r\n                throwCount: 0,\r\n            };\r\n            initialPlayerlist.push(player);\r\n        });\r\n        setPlayerList(initialPlayerlist);\r\n    }\r\n*/\r\n    function changeActivePlayer() {\r\n        const prevPlayerTurnIndex = playerTurn;\r\n        const newPlayerTurnIndex = playerTurn + 1;\r\n        const newPlayerList: BASIC.PlayerProps[] = [...playerList];\r\n\r\n        newPlayerList[prevPlayerTurnIndex].isActive = false;\r\n        const isEndOfArray = newPlayerTurnIndex > newPlayerList.length - 1;\r\n        const handleNewIndex = isEndOfArray ? 0 : newPlayerTurnIndex;\r\n        newPlayerList[handleNewIndex].isBust = false;\r\n        newPlayerList[handleNewIndex].isActive = true;\r\n        setPlayerList(newPlayerList);\r\n        setPlayerTurn(handleNewIndex);\r\n        setThrowCount(0);\r\n\r\n        if (isEndOfArray) {\r\n            setRoundsCount(roundsCount + 1);\r\n            newPlayerList.forEach((player) => {\r\n                return player.rounds.push({\r\n                    throw1: undefined,\r\n                    throw2: undefined,\r\n                    throw3: undefined,\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function playSound(path: string) {\r\n        var audio = new Audio(path);\r\n        audio.play();\r\n        if (path === '/sounds/throw-sound.mp3') {\r\n            audio.currentTime = 2.3;\r\n        }\r\n        else if (path === '/sounds/undo-sound.mp3') {\r\n            audio.currentTime = 0.2\r\n            audio.volume = 0.1\r\n        }\r\n    }\r\n\r\n    function handleThrow(\r\n        player: BASIC.PlayerProps,\r\n        currentThrow: number,\r\n        currentScoreAchieved: number | any\r\n    ) {\r\n        setHistory([\r\n            ...history,\r\n            {\r\n                finishedPlayerList: JSON.parse(JSON.stringify(finishedPlayerList)),\r\n                playerList: JSON.parse(JSON.stringify(playerList)),\r\n                playerScore,\r\n                throwCount,\r\n                playerTurn,\r\n                roundsCount,\r\n            },\r\n        ]);\r\n\r\n        const newScore = playerList[playerTurn].score - currentScoreAchieved;\r\n        const currentPlayerThrows =\r\n            playerList[playerTurn].rounds[playerList[playerTurn].rounds.length - 1];\r\n        switch (currentThrow) {\r\n            case 0:\r\n                currentPlayerThrows.throw1 = currentScoreAchieved as unknown as number;\r\n                break;\r\n            case 1:\r\n                currentPlayerThrows.throw2 = currentScoreAchieved as unknown as number;\r\n                break;\r\n            case 2:\r\n                currentPlayerThrows.throw3 = currentScoreAchieved as unknown as number;\r\n                break;\r\n            default:\r\n        }\r\n        setPlayerScore(newScore);\r\n\r\n        if (currentScoreAchieved > playerList[playerTurn].score) {\r\n            bust(playerScore);\r\n            playSound('/sounds/error-sound.mp3')\r\n        } else {\r\n            playerList[playerTurn].score = newScore;\r\n            setThrowCount(currentThrow + 1);\r\n            playSound('/sounds/throw-sound.mp3')\r\n        }\r\n        if (playerList[playerTurn].score === 0) {\r\n            if (playerList.length === 2) {\r\n                handleLastPlayer()\r\n                return finishedPlayerList\r\n            }\r\n            else if (finishedPlayerList.length < 1) {\r\n                setIsOverlayOpen(true);\r\n                playSound('/sounds/win-sound.mp3')\r\n            }\r\n            else {\r\n                handleFinishedPlayer()\r\n                return playerList\r\n            } setWinnerList(finishedPlayerList)\r\n        }\r\n        const updatedPlayerlist = [...playerList];\r\n        updatedPlayerlist[playerTurn] = player;\r\n        setPlayerList(updatedPlayerlist);\r\n        playerList[playerTurn].throwCount = throwCount;\r\n    }\r\n\r\n    function bust(bustedPlayerScore: number) {\r\n        const currentRoundOfPlayer = playerList[playerTurn].rounds[roundsCount - 1];\r\n        const firstThrow = currentRoundOfPlayer.throw1;\r\n        const secondThrow = currentRoundOfPlayer.throw2;\r\n        const thirdThrow = currentRoundOfPlayer.throw3;\r\n        let oldThrowScore = playerList[playerTurn].score;\r\n        playerList[playerTurn].isBust = true;\r\n\r\n        if (thirdThrow) {\r\n            let firstAndSecondThrowScore = 0;\r\n            if (firstThrow !== undefined && secondThrow !== undefined) {\r\n                firstAndSecondThrowScore = firstThrow + secondThrow;\r\n            }\r\n            oldThrowScore = firstAndSecondThrowScore + bustedPlayerScore;\r\n        } else if (\r\n            firstThrow !== undefined &&\r\n            secondThrow !== undefined &&\r\n            secondThrow > playerList[playerTurn].score\r\n        ) {\r\n            oldThrowScore = firstThrow + bustedPlayerScore;\r\n        }\r\n\r\n        playerList[playerTurn].score = oldThrowScore;\r\n        changeActivePlayer();\r\n    }\r\n\r\n    function handleFinishedPlayer() {\r\n        playerList[playerTurn].isPlaying = false;\r\n        const finishedPlayer = playerList.filter((player) => player.isPlaying === false);\r\n        const finishedPlayers = finishedPlayerList\r\n        finishedPlayers.push(finishedPlayer[0])\r\n        const unfinishedPlayers = playerList.filter((player) => player.isPlaying === true);\r\n        changeActivePlayer()\r\n        unfinishedPlayers[playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn].isActive = true\r\n        setPlayerList(unfinishedPlayers)\r\n        setFinishedPlayerList(finishedPlayers)\r\n        setPlayerTurn(playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn)\r\n        setWinnerList(finishedPlayerList)\r\n    }\r\n\r\n    function handleLastPlayer() {\r\n        playerList[playerTurn].isPlaying = false;\r\n        const newList = [...finishedPlayerList]\r\n        const lastPlayer = playerList.filter(player => player.score !== 0)\r\n        const secondlastPlayer = playerList.filter(player => player.score == 0)\r\n        newList.push(secondlastPlayer[0], lastPlayer[0])\r\n        setFinishedPlayerList(newList)\r\n    }\r\n\r\n    function sortPlayer() {\r\n        const scoreArray: number[] = []\r\n        playerList.forEach(player => {\r\n            scoreArray.push(player.score)\r\n        })\r\n\r\n        allPlayersScoreSort(scoreArray)\r\n\r\n        let i = 0\r\n        const newList = [...finishedPlayerList]\r\n\r\n        while (i < playerList.length) {\r\n\r\n            playerList.forEach(player => {\r\n                if (player.score === scoreArray[0]) {\r\n                    scoreArray.splice(0, 1)\r\n                    newList.push(player)\r\n                }\r\n            }\r\n            )\r\n            i += 1\r\n        }\r\n        setFinishedPlayerList(newList)\r\n    }\r\n\r\n    function allPlayersScoreSort(arr: number[]) {\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n\r\n            for (let j = 0; j < (arr.length - i - 1); j++) {\r\n\r\n                if (arr[j] > arr[j + 1]) {\r\n\r\n                    let temp = arr[j]\r\n                    arr[j] = arr[j + 1]\r\n                    arr[j + 1] = temp\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleUndo() {\r\n        if (history.length > 0) {\r\n            const lastState = history.pop();\r\n            setFinishedPlayerList(lastState.finishedPlayerList)\r\n            setPlayerList(lastState.playerList);\r\n            setPlayerScore(lastState.playerScore);\r\n            setThrowCount(lastState.throwCount);\r\n            setPlayerTurn(lastState.playerTurn);\r\n            setRoundsCount(lastState.roundsCount);\r\n            setHistory([...history]);\r\n            playSound('/sounds/undo-sound.mp3')\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        initializePlayerList();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (throwCount === 3 && !isOverlayOpen) {\r\n            changeActivePlayer();\r\n        }\r\n    }, [throwCount]);\r\n\r\n    useEffect(() => {\r\n        if (finishedPlayerList.length === players.length) {\r\n            setWinnerList(finishedPlayerList)\r\n            setLastHistory(history)\r\n            navigate(\"/summary\");\r\n            if (players.length === 2) {\r\n                playSound('/sounds/win-sound.mp3')\r\n            }\r\n        }\r\n    }, [finishedPlayerList.length, players.length]);\r\n\r\n    useEffect(() => {\r\n        if (playerTurn === 5) {\r\n            const player = document.getElementById(\"playerid\")\r\n            player?.scrollIntoView({\r\n                behavior: \"smooth\"\r\n            })\r\n        } else if (playerTurn + 1 === playerList.length) {\r\n            const player = document.getElementById(\"playerid\")\r\n            player?.scrollIntoView({\r\n                behavior: \"smooth\"\r\n            })\r\n        }\r\n        else if (playerTurn === 0) {\r\n            window.scroll({\r\n                top: 0,\r\n                behavior: \"smooth\"\r\n            })\r\n        }\r\n    }, [playerTurn, playerList.length]);\r\n\r\n    useEffect(() => {\r\n        if (undoFromSummary === true) {\r\n            setHistory(lastHistory)\r\n            setUndoFromSummary(false)\r\n            setUndoLastHistory(true)\r\n        }\r\n    }, [undoFromSummary]);\r\n\r\n    useEffect(() => {\r\n        if (undoLastHistory === true) {\r\n            handleUndo()\r\n            setUndoLastHistory(false)\r\n        }\r\n    }, [undoLastHistory]);\r\n\r\n    return (\r\n        <>\r\n            <Overlay\r\n                className=\"overlayBox\"\r\n                isOpen={isOverlayOpen}\r\n            >\r\n                <div className=\"finishGameOverlay\">\r\n                    <p className=\"overlayHeading\">Continue Game?</p>\r\n                    <div>\r\n                        <Button\r\n                            label=\"Finish\"\r\n                            isLink\r\n                            handleClick={() => sortPlayer()}\r\n                            type=\"secondary\"\r\n                            isInverted={true}\r\n                        />\r\n                        <Button\r\n                            label=\"Continue\"\r\n                            handleClick={() => {\r\n                                handleFinishedPlayer();\r\n                                setIsOverlayOpen(!isOverlayOpen);\r\n                            }}\r\n                            type=\"primary\"\r\n                        />\r\n                        <LinkButton\r\n                            icon={Undo}\r\n                            label=\"Undo Throw\"\r\n                            handleClick={() => {\r\n                                setIsOverlayOpen(!isOverlayOpen)\r\n                                handleUndo()\r\n                            }}\r\n                            className=\"undoThrow\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Overlay>\r\n            <div className=\"gamePageHeader\">\r\n                <Link to=\"/\" className=\"top\">\r\n                    <img src={Back} alt=\"\" />\r\n\r\n                </Link>\r\n            </div>\r\n            <div className=\"gamePlayerItemContainer\">\r\n                <GamePlayerItemList\r\n                    userMap={playerList}\r\n                    score={playerList[playerTurn]?.score}\r\n                    round={roundsCount}\r\n                    isBust={playerList[playerTurn]?.isBust}\r\n                    throwCount={playerList[playerTurn]?.throwCount}\r\n                />\r\n                <FinishedGamePlayerItemList\r\n                    userMap={finishedPlayerList} />\r\n            </div>\r\n            <div className=\"keyboard-and-undo\">\r\n                <NumberButton value=\"Undo\" handleClick={handleUndo} />\r\n                <Keyboard\r\n                    handleClick={(value) =>\r\n                        handleThrow(playerList[playerTurn], throwCount, value)\r\n                    }\r\n                    isOverlayOpen={isOverlayOpen}\r\n                />\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}