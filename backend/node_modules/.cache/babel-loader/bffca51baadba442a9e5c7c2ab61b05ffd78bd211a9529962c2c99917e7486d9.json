{"ast":null,"code":"import Keyboard from\"../../components/Keyboard/Keyboard\";import\"./game.css\";import Back from\"../../icons/back.svg\";import{Link,useNavigate}from\"react-router-dom\";import{useEffect,useState}from\"react\";import GamePlayerItemList from\"../../components/GamePlayerItem/GamplayerItemList\";import Overlay from\"../../components/Overlay/Overlay\";import Button from\"../../components/Button/Button\";import NumberButton from\"../../components/Keyboard/NumberButton\";import FinishedGamePlayerItemList from\"../../components/GamePlayerItem/FinishedGamePlayerItemList\";import LinkButton from\"../../components/LinkButton/LinkButton\";import Undo from\"../../icons/undo-copy.svg\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Game(_ref){var _playerList$playerTur,_playerList$playerTur2,_playerList$playerTur3;let{players,setWinnerList,undoFromSummary,setUndoFromSummary,setLastHistory,lastHistory}=_ref;const navigate=useNavigate();const[playerScore,setPlayerScore]=useState(301);const[roundsCount,setRoundsCount]=useState(1);const[playerList,setPlayerList]=useState([]);const[throwCount,setThrowCount]=useState(0);const[playerTurn,setPlayerTurn]=useState(0);const[isOverlayOpen,setIsOverlayOpen]=useState(false);const[history,setHistory]=useState([]);const[finishedPlayerList,setFinishedPlayerList]=useState([]);const[undoLastHistory,setUndoLastHistory]=useState(false);const ERROR_SOUND_PATH=\"/sounds/error-sound.mp3\";const THROW_SOUND_PATH=\"/sounds/throw-sound.mp3\";const WIN_SOUND_PATH=\"/sounds/win-sound.mp3\";const UNDO_SOUND_PATH=\"/sounds/undo-sound.mp3\";function initializePlayerList(){const initialPlayerlist=players.map((user,i)=>({id:user.id,name:user.name,score:playerScore,isActive:i===0?true:false,index:i,rounds:[{throw1:undefined,throw2:undefined,throw3:undefined}],isPlaying:true,isBust:false,throwCount:0}));setPlayerList(initialPlayerlist);}function changeActivePlayer(){const prevPlayerTurnIndex=playerTurn;const newPlayerTurnIndex=playerTurn+1;const newPlayerList=[...playerList];newPlayerList[prevPlayerTurnIndex].isActive=false;const isEndOfArray=newPlayerTurnIndex>newPlayerList.length-1;const handleNewIndex=isEndOfArray?0:newPlayerTurnIndex;newPlayerList[handleNewIndex].isBust=false;newPlayerList[handleNewIndex].isActive=true;setPlayerList(newPlayerList);setPlayerTurn(handleNewIndex);setThrowCount(0);if(isEndOfArray){setRoundsCount(roundsCount+1);newPlayerList.forEach(player=>{return player.rounds.push({throw1:undefined,throw2:undefined,throw3:undefined});});}}function playSound(path){var audio=new Audio(path);audio.play();if(path===THROW_SOUND_PATH){audio.currentTime=2.3;}else if(path===UNDO_SOUND_PATH){audio.currentTime=0.2;audio.volume=0.1;}}function handleThrow(player,currentThrow,currentScoreAchieved){setHistory([...history,{finishedPlayerList:JSON.parse(JSON.stringify(finishedPlayerList)),playerList:JSON.parse(JSON.stringify(playerList)),playerScore,throwCount,playerTurn,roundsCount}]);const updatedPlayerScore=playerList[playerTurn].score-currentScoreAchieved;const currentPlayerThrows=playerList[playerTurn].rounds[playerList[playerTurn].rounds.length-1];const throwKey=`throw${currentThrow+1}`;currentPlayerThrows[throwKey]=currentScoreAchieved;setPlayerScore(updatedPlayerScore);if(currentScoreAchieved>playerList[playerTurn].score){handleBust(playerScore);playSound(ERROR_SOUND_PATH);}else{const updatedPlayerList=[...playerList];updatedPlayerList[playerTurn].score=updatedPlayerScore;setThrowCount(currentThrow+1);playSound(THROW_SOUND_PATH);}// wir überprüfen, ob der aktuelle Spieler das Spiel beendet hat\nif(playerList[playerTurn].score===0){if(playerList.length===2){handleLastPlayer();return finishedPlayerList;}else if(finishedPlayerList.length<1){setIsOverlayOpen(true);//Victory overlay\nplaySound(WIN_SOUND_PATH);}else{handlePlayerFinishTurn();return playerList;}setWinnerList(finishedPlayerList);}const updatedPlayerlist=[...playerList];updatedPlayerlist[playerTurn]={...player,throwCount};setPlayerList(updatedPlayerlist);}// wir prüfen, ob der Spieler überworfen hat\nfunction handleBust(bustedPlayerScore){const currentRoundOfPlayer=playerList[playerTurn].rounds[roundsCount-1];const{throw1:firstThrow,throw2:secondThrow,throw3:thirdThrow}=currentRoundOfPlayer;let oldThrowScore=playerList[playerTurn].score;playerList[playerTurn].isBust=true;if(thirdThrow){let firstAndSecondThrowScore=0;if(firstThrow!==undefined&&secondThrow!==undefined){firstAndSecondThrowScore=firstThrow+secondThrow;}oldThrowScore=firstAndSecondThrowScore+bustedPlayerScore;}else if(firstThrow!==undefined&&secondThrow!==undefined&&secondThrow>playerList[playerTurn].score){oldThrowScore=firstThrow+bustedPlayerScore;}playerList[playerTurn].score=oldThrowScore;changeActivePlayer();}//wir prüfen, ob der Spieler seinen Zug beendet hat\nfunction handlePlayerFinishTurn(){const updatedPlayerList=[...playerList];updatedPlayerList[playerTurn].isPlaying=false;const finishedPlayers=playerList.filter(player=>!player.isPlaying);finishedPlayerList.push(finishedPlayers[0]);const unfinishedPlayers=playerList.filter(player=>player.isPlaying);changeActivePlayer();const nextPlayerIndex=playerTurn>unfinishedPlayers.length-1?0:playerTurn;unfinishedPlayers[nextPlayerIndex].isActive=true;setPlayerList(unfinishedPlayers);setFinishedPlayerList(finishedPlayerList);setPlayerTurn(playerTurn>unfinishedPlayers.length-1?0:playerTurn);setWinnerList(finishedPlayerList);}function handleLastPlayer(){const updatedPlayerList=[...playerList];updatedPlayerList[playerTurn].isPlaying=false;const updatedFinishedPlayerList=[...finishedPlayerList];const playersWithNonZeroScore=playerList.filter(player=>player.score!==0);const playersWithZeroScore=playerList.filter(player=>player.score==0);updatedFinishedPlayerList.push(playersWithZeroScore[0],playersWithNonZeroScore[0]);setFinishedPlayerList(updatedFinishedPlayerList);}// wir sortieren main-array in absteigender Reihenfolge\nfunction sortPlayer(){const sortedPlayers=[...playerList].sort((a,b)=>b.score-a.score);const updatedFinishedPlayerList=[...finishedPlayerList,...sortedPlayers];setFinishedPlayerList(updatedFinishedPlayerList);}function handleUndo(){if(history.length>0){const newHistory=[...history];const lastState=newHistory.pop();setFinishedPlayerList(lastState.finishedPlayerList);setPlayerList(lastState.playerList);setPlayerScore(lastState.playerScore);setThrowCount(lastState.throwCount);setPlayerTurn(lastState.playerTurn);setRoundsCount(lastState.roundsCount);setHistory(newHistory);playSound(UNDO_SOUND_PATH);}}useEffect(()=>{initializePlayerList();},[]);useEffect(()=>{if(throwCount===3&&!isOverlayOpen){changeActivePlayer();}},[throwCount,isOverlayOpen]);useEffect(()=>{if(finishedPlayerList.length===players.length){setWinnerList(finishedPlayerList);setLastHistory(history);navigate(\"/summary\");if(players.length===2){playSound(WIN_SOUND_PATH);}}},[finishedPlayerList.length,players.length]);useEffect(()=>{if(!playerList||playerList.length===0)return;if(playerTurn===5||playerTurn+1===playerList.length){const player=document.getElementById(`playerid-${playerTurn}`);player===null||player===void 0?void 0:player.scrollIntoView({behavior:\"smooth\"});}else if(playerTurn===0){window.scroll({top:0,behavior:\"smooth\"});}},[playerTurn,playerList.length]);useEffect(()=>{if(undoFromSummary===true){setHistory(lastHistory);setUndoFromSummary(false);setUndoLastHistory(true);}},[undoFromSummary]);useEffect(()=>{if(undoLastHistory===true){handleUndo();setUndoLastHistory(false);}},[undoLastHistory]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Overlay,{className:\"overlayBox\",isOpen:isOverlayOpen,children:/*#__PURE__*/_jsxs(\"div\",{className:\"finishGameOverlay\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"overlayHeading\",children:\"Continue Game?\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Button,{label:\"Finish\",isLink:true,handleClick:sortPlayer,type:\"secondary\",isInverted:true}),/*#__PURE__*/_jsx(Button,{label:\"Continue\",handleClick:()=>{handlePlayerFinishTurn();setIsOverlayOpen(false);},type:\"primary\"}),/*#__PURE__*/_jsx(LinkButton,{icon:Undo,label:\"Undo Throw\",handleClick:()=>{setIsOverlayOpen(false);handleUndo();},className:\"undoThrow\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"gamePageHeader\",children:/*#__PURE__*/_jsx(Link,{to:\"/\",className:\"top\",children:/*#__PURE__*/_jsx(\"img\",{src:Back,alt:\"Back to Home\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"gamePlayerItemContainer\",children:[/*#__PURE__*/_jsx(GamePlayerItemList,{userMap:playerList,score:(_playerList$playerTur=playerList[playerTurn])===null||_playerList$playerTur===void 0?void 0:_playerList$playerTur.score,round:roundsCount,isBust:(_playerList$playerTur2=playerList[playerTurn])===null||_playerList$playerTur2===void 0?void 0:_playerList$playerTur2.isBust,throwCount:(_playerList$playerTur3=playerList[playerTurn])===null||_playerList$playerTur3===void 0?void 0:_playerList$playerTur3.throwCount}),/*#__PURE__*/_jsx(FinishedGamePlayerItemList,{userMap:finishedPlayerList})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"keyboard-and-undo\",children:[/*#__PURE__*/_jsx(NumberButton,{value:\"Undo\",handleClick:handleUndo}),/*#__PURE__*/_jsx(Keyboard,{handleClick:value=>handleThrow(playerList[playerTurn],throwCount,value),isOverlayOpen:isOverlayOpen})]})]});}export default Game;","map":{"version":3,"names":["Keyboard","Back","Link","useNavigate","useEffect","useState","GamePlayerItemList","Overlay","Button","NumberButton","FinishedGamePlayerItemList","LinkButton","Undo","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Game","_ref","_playerList$playerTur","_playerList$playerTur2","_playerList$playerTur3","players","setWinnerList","undoFromSummary","setUndoFromSummary","setLastHistory","lastHistory","navigate","playerScore","setPlayerScore","roundsCount","setRoundsCount","playerList","setPlayerList","throwCount","setThrowCount","playerTurn","setPlayerTurn","isOverlayOpen","setIsOverlayOpen","history","setHistory","finishedPlayerList","setFinishedPlayerList","undoLastHistory","setUndoLastHistory","ERROR_SOUND_PATH","THROW_SOUND_PATH","WIN_SOUND_PATH","UNDO_SOUND_PATH","initializePlayerList","initialPlayerlist","map","user","i","id","name","score","isActive","index","rounds","throw1","undefined","throw2","throw3","isPlaying","isBust","changeActivePlayer","prevPlayerTurnIndex","newPlayerTurnIndex","newPlayerList","isEndOfArray","length","handleNewIndex","forEach","player","push","playSound","path","audio","Audio","play","currentTime","volume","handleThrow","currentThrow","currentScoreAchieved","JSON","parse","stringify","updatedPlayerScore","currentPlayerThrows","throwKey","handleBust","updatedPlayerList","handleLastPlayer","handlePlayerFinishTurn","updatedPlayerlist","bustedPlayerScore","currentRoundOfPlayer","firstThrow","secondThrow","thirdThrow","oldThrowScore","firstAndSecondThrowScore","finishedPlayers","filter","unfinishedPlayers","nextPlayerIndex","updatedFinishedPlayerList","playersWithNonZeroScore","playersWithZeroScore","sortPlayer","sortedPlayers","sort","a","b","handleUndo","newHistory","lastState","pop","document","getElementById","scrollIntoView","behavior","window","scroll","top","children","className","isOpen","label","isLink","handleClick","type","isInverted","icon","to","src","alt","userMap","round","value"],"sources":["C:/Users/ilias.almerekov/Projects/darts/src/pages/Game/Game.tsx"],"sourcesContent":["import Keyboard from \"../../components/Keyboard/Keyboard\";\r\nimport \"./game.css\";\r\nimport Back from \"../../icons/back.svg\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport GamePlayerItemList from \"../../components/GamePlayerItem/GamplayerItemList\";\r\nimport Overlay from \"../../components/Overlay/Overlay\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport NumberButton from \"../../components/Keyboard/NumberButton\";\r\nimport FinishedGamePlayerItemList from \"../../components/GamePlayerItem/FinishedGamePlayerItemList\";\r\nimport LinkButton from \"../../components/LinkButton/LinkButton\";\r\nimport Undo from \"../../icons/undo-copy.svg\";\r\nimport { PlayerProps } from \"../Start/Start\";\r\n\r\ntype Props = {\r\n  players: PlayerProps[];\r\n  setWinnerList: Dispatch<SetStateAction<BASIC.PlayerProps[]>>;\r\n  undoFromSummary: boolean;\r\n  setUndoFromSummary: Dispatch<SetStateAction<boolean>>;\r\n  setLastHistory: Dispatch<SetStateAction<any>>;\r\n  lastHistory: any;\r\n};\r\n\r\nfunction Game({\r\n  players,\r\n  setWinnerList,\r\n  undoFromSummary,\r\n  setUndoFromSummary,\r\n  setLastHistory,\r\n  lastHistory,\r\n}: Props) {\r\n  const navigate = useNavigate();\r\n  const [playerScore, setPlayerScore] = useState(301);\r\n  const [roundsCount, setRoundsCount] = useState(1);\r\n  const [playerList, setPlayerList] = useState<BASIC.PlayerProps[]>([]);\r\n  const [throwCount, setThrowCount] = useState(0);\r\n  const [playerTurn, setPlayerTurn] = useState(0);\r\n  const [isOverlayOpen, setIsOverlayOpen] = useState(false);\r\n  const [history, setHistory] = useState<any[]>([]);\r\n  const [finishedPlayerList, setFinishedPlayerList] = useState<\r\n    BASIC.PlayerProps[]\r\n  >([]);\r\n  const [undoLastHistory, setUndoLastHistory] = useState(false);\r\n  const ERROR_SOUND_PATH = \"/sounds/error-sound.mp3\";\r\n  const THROW_SOUND_PATH = \"/sounds/throw-sound.mp3\";\r\n  const WIN_SOUND_PATH = \"/sounds/win-sound.mp3\";\r\n  const UNDO_SOUND_PATH = \"/sounds/undo-sound.mp3\";\r\n\r\n  function initializePlayerList() {\r\n    const initialPlayerlist: BASIC.PlayerProps[] = players.map(\r\n      (user: BASIC.UserProps, i: number) => ({\r\n        id: user.id,\r\n        name: user.name,\r\n        score: playerScore,\r\n        isActive: i === 0 ? true : false,\r\n        index: i,\r\n        rounds: [{ throw1: undefined, throw2: undefined, throw3: undefined }],\r\n        isPlaying: true,\r\n        isBust: false,\r\n        throwCount: 0,\r\n      })\r\n    );\r\n    setPlayerList(initialPlayerlist);\r\n  }\r\n\r\n  function changeActivePlayer() {\r\n    const prevPlayerTurnIndex = playerTurn;\r\n    const newPlayerTurnIndex = playerTurn + 1;\r\n    const newPlayerList: BASIC.PlayerProps[] = [...playerList];\r\n\r\n    newPlayerList[prevPlayerTurnIndex].isActive = false;\r\n    const isEndOfArray = newPlayerTurnIndex > newPlayerList.length - 1;\r\n    const handleNewIndex = isEndOfArray ? 0 : newPlayerTurnIndex;\r\n    newPlayerList[handleNewIndex].isBust = false;\r\n    newPlayerList[handleNewIndex].isActive = true;\r\n    setPlayerList(newPlayerList);\r\n    setPlayerTurn(handleNewIndex);\r\n    setThrowCount(0);\r\n\r\n    if (isEndOfArray) {\r\n      setRoundsCount(roundsCount + 1);\r\n      newPlayerList.forEach((player) => {\r\n        return player.rounds.push({\r\n          throw1: undefined,\r\n          throw2: undefined,\r\n          throw3: undefined,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  function playSound(path: string) {\r\n    var audio = new Audio(path);\r\n    audio.play();\r\n    if (path === THROW_SOUND_PATH) {\r\n      audio.currentTime = 2.3;\r\n    } else if (path === UNDO_SOUND_PATH) {\r\n      audio.currentTime = 0.2;\r\n      audio.volume = 0.1;\r\n    }\r\n  }\r\n\r\n  function handleThrow(\r\n    player: BASIC.PlayerProps,\r\n    currentThrow: number,\r\n    currentScoreAchieved: number | any\r\n  ) {\r\n    setHistory([\r\n      ...history,\r\n      {\r\n        finishedPlayerList: JSON.parse(JSON.stringify(finishedPlayerList)),\r\n        playerList: JSON.parse(JSON.stringify(playerList)),\r\n        playerScore,\r\n        throwCount,\r\n        playerTurn,\r\n        roundsCount,\r\n      },\r\n    ]);\r\n\r\n    const updatedPlayerScore =\r\n      playerList[playerTurn].score - currentScoreAchieved;\r\n    const currentPlayerThrows =\r\n      playerList[playerTurn].rounds[playerList[playerTurn].rounds.length - 1];\r\n    const throwKey = `throw${\r\n      currentThrow + 1\r\n    }` as keyof typeof currentPlayerThrows;\r\n\r\n    currentPlayerThrows[throwKey] = currentScoreAchieved;\r\n    setPlayerScore(updatedPlayerScore);\r\n\r\n    if (currentScoreAchieved > playerList[playerTurn].score) {\r\n      handleBust(playerScore);\r\n      playSound(ERROR_SOUND_PATH);\r\n    } else {\r\n      const updatedPlayerList = [...playerList];\r\n      updatedPlayerList[playerTurn].score = updatedPlayerScore;\r\n      setThrowCount(currentThrow + 1);\r\n      playSound(THROW_SOUND_PATH);\r\n    }\r\n    // wir überprüfen, ob der aktuelle Spieler das Spiel beendet hat\r\n    if (playerList[playerTurn].score === 0) {\r\n      if (playerList.length === 2) {\r\n        handleLastPlayer();\r\n        return finishedPlayerList;\r\n      } else if (finishedPlayerList.length < 1) {\r\n        setIsOverlayOpen(true); //Victory overlay\r\n        playSound(WIN_SOUND_PATH);\r\n      } else {\r\n        handlePlayerFinishTurn();\r\n        return playerList;\r\n      }\r\n      setWinnerList(finishedPlayerList);\r\n    }\r\n    const updatedPlayerlist = [...playerList];\r\n    updatedPlayerlist[playerTurn] = { ...player, throwCount };\r\n    setPlayerList(updatedPlayerlist);\r\n  }\r\n  // wir prüfen, ob der Spieler überworfen hat\r\n  function handleBust(bustedPlayerScore: number) {\r\n    const currentRoundOfPlayer = playerList[playerTurn].rounds[roundsCount - 1];\r\n    const {\r\n      throw1: firstThrow,\r\n      throw2: secondThrow,\r\n      throw3: thirdThrow,\r\n    } = currentRoundOfPlayer;\r\n    let oldThrowScore = playerList[playerTurn].score;\r\n    playerList[playerTurn].isBust = true;\r\n\r\n    if (thirdThrow) {\r\n      let firstAndSecondThrowScore = 0;\r\n      if (firstThrow !== undefined && secondThrow !== undefined) {\r\n        firstAndSecondThrowScore = firstThrow + secondThrow;\r\n      }\r\n      oldThrowScore = firstAndSecondThrowScore + bustedPlayerScore;\r\n    } else if (\r\n      firstThrow !== undefined &&\r\n      secondThrow !== undefined &&\r\n      secondThrow > playerList[playerTurn].score\r\n    ) {\r\n      oldThrowScore = firstThrow + bustedPlayerScore;\r\n    }\r\n\r\n    playerList[playerTurn].score = oldThrowScore;\r\n    changeActivePlayer();\r\n  }\r\n    //wir prüfen, ob der Spieler seinen Zug beendet hat\r\n  function handlePlayerFinishTurn() {\r\n    const updatedPlayerList = [...playerList];\r\n    updatedPlayerList[playerTurn].isPlaying = false;\r\n    const finishedPlayers = playerList.filter((player) => !player.isPlaying);\r\n    finishedPlayerList.push(finishedPlayers[0]);\r\n\r\n    const unfinishedPlayers = playerList.filter((player) => player.isPlaying);\r\n    changeActivePlayer();\r\n    const nextPlayerIndex =\r\n      playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn;\r\n    unfinishedPlayers[nextPlayerIndex].isActive = true;\r\n    setPlayerList(unfinishedPlayers);\r\n    setFinishedPlayerList(finishedPlayerList);\r\n    setPlayerTurn(playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn);\r\n    setWinnerList(finishedPlayerList);\r\n  }\r\n\r\n  function handleLastPlayer() {\r\n    const updatedPlayerList = [...playerList];\r\n    updatedPlayerList[playerTurn].isPlaying = false;\r\n\r\n    const updatedFinishedPlayerList = [...finishedPlayerList];\r\n    const playersWithNonZeroScore = playerList.filter(\r\n      (player) => player.score !== 0\r\n    );\r\n    const playersWithZeroScore = playerList.filter(\r\n      (player) => player.score == 0\r\n    );\r\n    updatedFinishedPlayerList.push(\r\n      playersWithZeroScore[0],\r\n      playersWithNonZeroScore[0]\r\n    );\r\n    setFinishedPlayerList(updatedFinishedPlayerList);\r\n  }\r\n  // wir sortieren main-array in absteigender Reihenfolge\r\n  function sortPlayer() {\r\n    const sortedPlayers = [...playerList].sort((a, b) => b.score - a.score);\r\n    const updatedFinishedPlayerList = [...finishedPlayerList, ...sortedPlayers];\r\n    setFinishedPlayerList(updatedFinishedPlayerList);\r\n  }\r\n\r\n  function handleUndo() {\r\n    if (history.length > 0) {\r\n      const newHistory = [...history];\r\n      const lastState = newHistory.pop();\r\n      setFinishedPlayerList(lastState.finishedPlayerList);\r\n      setPlayerList(lastState.playerList);\r\n      setPlayerScore(lastState.playerScore);\r\n      setThrowCount(lastState.throwCount);\r\n      setPlayerTurn(lastState.playerTurn);\r\n      setRoundsCount(lastState.roundsCount);\r\n      setHistory(newHistory);\r\n      playSound(UNDO_SOUND_PATH);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    initializePlayerList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (throwCount === 3 && !isOverlayOpen) {\r\n      changeActivePlayer();\r\n    }\r\n  }, [throwCount, isOverlayOpen]);\r\n\r\n  useEffect(() => {\r\n    if (finishedPlayerList.length === players.length) {\r\n      setWinnerList(finishedPlayerList);\r\n      setLastHistory(history);\r\n      navigate(\"/summary\");\r\n      if (players.length === 2) {\r\n        playSound(WIN_SOUND_PATH);\r\n      }\r\n    }\r\n  }, [finishedPlayerList.length, players.length]);\r\n\r\n  useEffect(() => {\r\n    if (!playerList || playerList.length === 0) return;\r\n\r\n    if (playerTurn === 5 || playerTurn + 1 === playerList.length) {\r\n      const player = document.getElementById(`playerid-${playerTurn}`);\r\n      player?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      });\r\n    } else if (playerTurn === 0) {\r\n      window.scroll({\r\n        top: 0,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }, [playerTurn, playerList.length]);\r\n\r\n  useEffect(() => {\r\n    if (undoFromSummary === true) {\r\n      setHistory(lastHistory);\r\n      setUndoFromSummary(false);\r\n      setUndoLastHistory(true);\r\n    }\r\n  }, [undoFromSummary]);\r\n\r\n  useEffect(() => {\r\n    if (undoLastHistory === true) {\r\n      handleUndo();\r\n      setUndoLastHistory(false);\r\n    }\r\n  }, [undoLastHistory]);\r\n\r\n  return (\r\n    <>\r\n      <Overlay className=\"overlayBox\" isOpen={isOverlayOpen}>\r\n        <div className=\"finishGameOverlay\">\r\n          <p className=\"overlayHeading\">Continue Game?</p>\r\n          <div>\r\n            <Button\r\n              label=\"Finish\"\r\n              isLink\r\n              handleClick={sortPlayer}\r\n              type=\"secondary\"\r\n              isInverted={true}\r\n            />\r\n            <Button\r\n              label=\"Continue\"\r\n              handleClick={() => {\r\n                handlePlayerFinishTurn();\r\n                setIsOverlayOpen(false);\r\n              }}\r\n              type=\"primary\"\r\n            />\r\n            <LinkButton\r\n              icon={Undo}\r\n              label=\"Undo Throw\"\r\n              handleClick={() => {\r\n                setIsOverlayOpen(false);\r\n                handleUndo();\r\n              }}\r\n              className=\"undoThrow\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Overlay>\r\n      <div className=\"gamePageHeader\">\r\n        <Link to=\"/\" className=\"top\">\r\n          <img src={Back} alt=\"Back to Home\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"gamePlayerItemContainer\">\r\n        <GamePlayerItemList\r\n          userMap={playerList}\r\n          score={playerList[playerTurn]?.score}\r\n          round={roundsCount}\r\n          isBust={playerList[playerTurn]?.isBust}\r\n          throwCount={playerList[playerTurn]?.throwCount}\r\n        />\r\n        <FinishedGamePlayerItemList userMap={finishedPlayerList} />\r\n      </div>\r\n      <div className=\"keyboard-and-undo\">\r\n        <NumberButton value=\"Undo\" handleClick={handleUndo} />\r\n        <Keyboard\r\n          handleClick={(value) =>\r\n            handleThrow(playerList[playerTurn], throwCount, value)\r\n          }\r\n          isOverlayOpen={isOverlayOpen}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Game;\r\n"],"mappings":"AAAA,MAAO,CAAAA,QAAQ,KAAM,oCAAoC,CACzD,MAAO,YAAY,CACnB,MAAO,CAAAC,IAAI,KAAM,sBAAsB,CACvC,OAASC,IAAI,CAAEC,WAAW,KAAQ,kBAAkB,CACpD,OAAmCC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CACrE,MAAO,CAAAC,kBAAkB,KAAM,mDAAmD,CAClF,MAAO,CAAAC,OAAO,KAAM,kCAAkC,CACtD,MAAO,CAAAC,MAAM,KAAM,gCAAgC,CACnD,MAAO,CAAAC,YAAY,KAAM,wCAAwC,CACjE,MAAO,CAAAC,0BAA0B,KAAM,4DAA4D,CACnG,MAAO,CAAAC,UAAU,KAAM,wCAAwC,CAC/D,MAAO,CAAAC,IAAI,KAAM,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAY7C,QAAS,CAAAC,IAAIA,CAAAC,IAAA,CAOH,KAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,IAPI,CACZC,OAAO,CACPC,aAAa,CACbC,eAAe,CACfC,kBAAkB,CAClBC,cAAc,CACdC,WACK,CAAC,CAAAT,IAAA,CACN,KAAM,CAAAU,QAAQ,CAAG3B,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAC4B,WAAW,CAAEC,cAAc,CAAC,CAAG3B,QAAQ,CAAC,GAAG,CAAC,CACnD,KAAM,CAAC4B,WAAW,CAAEC,cAAc,CAAC,CAAG7B,QAAQ,CAAC,CAAC,CAAC,CACjD,KAAM,CAAC8B,UAAU,CAAEC,aAAa,CAAC,CAAG/B,QAAQ,CAAsB,EAAE,CAAC,CACrE,KAAM,CAACgC,UAAU,CAAEC,aAAa,CAAC,CAAGjC,QAAQ,CAAC,CAAC,CAAC,CAC/C,KAAM,CAACkC,UAAU,CAAEC,aAAa,CAAC,CAAGnC,QAAQ,CAAC,CAAC,CAAC,CAC/C,KAAM,CAACoC,aAAa,CAAEC,gBAAgB,CAAC,CAAGrC,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAACsC,OAAO,CAAEC,UAAU,CAAC,CAAGvC,QAAQ,CAAQ,EAAE,CAAC,CACjD,KAAM,CAACwC,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGzC,QAAQ,CAE1D,EAAE,CAAC,CACL,KAAM,CAAC0C,eAAe,CAAEC,kBAAkB,CAAC,CAAG3C,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAAA4C,gBAAgB,CAAG,yBAAyB,CAClD,KAAM,CAAAC,gBAAgB,CAAG,yBAAyB,CAClD,KAAM,CAAAC,cAAc,CAAG,uBAAuB,CAC9C,KAAM,CAAAC,eAAe,CAAG,wBAAwB,CAEhD,QAAS,CAAAC,oBAAoBA,CAAA,CAAG,CAC9B,KAAM,CAAAC,iBAAsC,CAAG9B,OAAO,CAAC+B,GAAG,CACxD,CAACC,IAAqB,CAAEC,CAAS,IAAM,CACrCC,EAAE,CAAEF,IAAI,CAACE,EAAE,CACXC,IAAI,CAAEH,IAAI,CAACG,IAAI,CACfC,KAAK,CAAE7B,WAAW,CAClB8B,QAAQ,CAAEJ,CAAC,GAAK,CAAC,CAAG,IAAI,CAAG,KAAK,CAChCK,KAAK,CAAEL,CAAC,CACRM,MAAM,CAAE,CAAC,CAAEC,MAAM,CAAEC,SAAS,CAAEC,MAAM,CAAED,SAAS,CAAEE,MAAM,CAAEF,SAAU,CAAC,CAAC,CACrEG,SAAS,CAAE,IAAI,CACfC,MAAM,CAAE,KAAK,CACbhC,UAAU,CAAE,CACd,CAAC,CACH,CAAC,CACDD,aAAa,CAACkB,iBAAiB,CAAC,CAClC,CAEA,QAAS,CAAAgB,kBAAkBA,CAAA,CAAG,CAC5B,KAAM,CAAAC,mBAAmB,CAAGhC,UAAU,CACtC,KAAM,CAAAiC,kBAAkB,CAAGjC,UAAU,CAAG,CAAC,CACzC,KAAM,CAAAkC,aAAkC,CAAG,CAAC,GAAGtC,UAAU,CAAC,CAE1DsC,aAAa,CAACF,mBAAmB,CAAC,CAACV,QAAQ,CAAG,KAAK,CACnD,KAAM,CAAAa,YAAY,CAAGF,kBAAkB,CAAGC,aAAa,CAACE,MAAM,CAAG,CAAC,CAClE,KAAM,CAAAC,cAAc,CAAGF,YAAY,CAAG,CAAC,CAAGF,kBAAkB,CAC5DC,aAAa,CAACG,cAAc,CAAC,CAACP,MAAM,CAAG,KAAK,CAC5CI,aAAa,CAACG,cAAc,CAAC,CAACf,QAAQ,CAAG,IAAI,CAC7CzB,aAAa,CAACqC,aAAa,CAAC,CAC5BjC,aAAa,CAACoC,cAAc,CAAC,CAC7BtC,aAAa,CAAC,CAAC,CAAC,CAEhB,GAAIoC,YAAY,CAAE,CAChBxC,cAAc,CAACD,WAAW,CAAG,CAAC,CAAC,CAC/BwC,aAAa,CAACI,OAAO,CAAEC,MAAM,EAAK,CAChC,MAAO,CAAAA,MAAM,CAACf,MAAM,CAACgB,IAAI,CAAC,CACxBf,MAAM,CAAEC,SAAS,CACjBC,MAAM,CAAED,SAAS,CACjBE,MAAM,CAAEF,SACV,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CACF,CAEA,QAAS,CAAAe,SAASA,CAACC,IAAY,CAAE,CAC/B,GAAI,CAAAC,KAAK,CAAG,GAAI,CAAAC,KAAK,CAACF,IAAI,CAAC,CAC3BC,KAAK,CAACE,IAAI,CAAC,CAAC,CACZ,GAAIH,IAAI,GAAK/B,gBAAgB,CAAE,CAC7BgC,KAAK,CAACG,WAAW,CAAG,GAAG,CACzB,CAAC,IAAM,IAAIJ,IAAI,GAAK7B,eAAe,CAAE,CACnC8B,KAAK,CAACG,WAAW,CAAG,GAAG,CACvBH,KAAK,CAACI,MAAM,CAAG,GAAG,CACpB,CACF,CAEA,QAAS,CAAAC,WAAWA,CAClBT,MAAyB,CACzBU,YAAoB,CACpBC,oBAAkC,CAClC,CACA7C,UAAU,CAAC,CACT,GAAGD,OAAO,CACV,CACEE,kBAAkB,CAAE6C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC/C,kBAAkB,CAAC,CAAC,CAClEV,UAAU,CAAEuD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACzD,UAAU,CAAC,CAAC,CAClDJ,WAAW,CACXM,UAAU,CACVE,UAAU,CACVN,WACF,CAAC,CACF,CAAC,CAEF,KAAM,CAAA4D,kBAAkB,CACtB1D,UAAU,CAACI,UAAU,CAAC,CAACqB,KAAK,CAAG6B,oBAAoB,CACrD,KAAM,CAAAK,mBAAmB,CACvB3D,UAAU,CAACI,UAAU,CAAC,CAACwB,MAAM,CAAC5B,UAAU,CAACI,UAAU,CAAC,CAACwB,MAAM,CAACY,MAAM,CAAG,CAAC,CAAC,CACzE,KAAM,CAAAoB,QAAQ,CAAG,QACfP,YAAY,CAAG,CAAC,EACoB,CAEtCM,mBAAmB,CAACC,QAAQ,CAAC,CAAGN,oBAAoB,CACpDzD,cAAc,CAAC6D,kBAAkB,CAAC,CAElC,GAAIJ,oBAAoB,CAAGtD,UAAU,CAACI,UAAU,CAAC,CAACqB,KAAK,CAAE,CACvDoC,UAAU,CAACjE,WAAW,CAAC,CACvBiD,SAAS,CAAC/B,gBAAgB,CAAC,CAC7B,CAAC,IAAM,CACL,KAAM,CAAAgD,iBAAiB,CAAG,CAAC,GAAG9D,UAAU,CAAC,CACzC8D,iBAAiB,CAAC1D,UAAU,CAAC,CAACqB,KAAK,CAAGiC,kBAAkB,CACxDvD,aAAa,CAACkD,YAAY,CAAG,CAAC,CAAC,CAC/BR,SAAS,CAAC9B,gBAAgB,CAAC,CAC7B,CACA;AACA,GAAIf,UAAU,CAACI,UAAU,CAAC,CAACqB,KAAK,GAAK,CAAC,CAAE,CACtC,GAAIzB,UAAU,CAACwC,MAAM,GAAK,CAAC,CAAE,CAC3BuB,gBAAgB,CAAC,CAAC,CAClB,MAAO,CAAArD,kBAAkB,CAC3B,CAAC,IAAM,IAAIA,kBAAkB,CAAC8B,MAAM,CAAG,CAAC,CAAE,CACxCjC,gBAAgB,CAAC,IAAI,CAAC,CAAE;AACxBsC,SAAS,CAAC7B,cAAc,CAAC,CAC3B,CAAC,IAAM,CACLgD,sBAAsB,CAAC,CAAC,CACxB,MAAO,CAAAhE,UAAU,CACnB,CACAV,aAAa,CAACoB,kBAAkB,CAAC,CACnC,CACA,KAAM,CAAAuD,iBAAiB,CAAG,CAAC,GAAGjE,UAAU,CAAC,CACzCiE,iBAAiB,CAAC7D,UAAU,CAAC,CAAG,CAAE,GAAGuC,MAAM,CAAEzC,UAAW,CAAC,CACzDD,aAAa,CAACgE,iBAAiB,CAAC,CAClC,CACA;AACA,QAAS,CAAAJ,UAAUA,CAACK,iBAAyB,CAAE,CAC7C,KAAM,CAAAC,oBAAoB,CAAGnE,UAAU,CAACI,UAAU,CAAC,CAACwB,MAAM,CAAC9B,WAAW,CAAG,CAAC,CAAC,CAC3E,KAAM,CACJ+B,MAAM,CAAEuC,UAAU,CAClBrC,MAAM,CAAEsC,WAAW,CACnBrC,MAAM,CAAEsC,UACV,CAAC,CAAGH,oBAAoB,CACxB,GAAI,CAAAI,aAAa,CAAGvE,UAAU,CAACI,UAAU,CAAC,CAACqB,KAAK,CAChDzB,UAAU,CAACI,UAAU,CAAC,CAAC8B,MAAM,CAAG,IAAI,CAEpC,GAAIoC,UAAU,CAAE,CACd,GAAI,CAAAE,wBAAwB,CAAG,CAAC,CAChC,GAAIJ,UAAU,GAAKtC,SAAS,EAAIuC,WAAW,GAAKvC,SAAS,CAAE,CACzD0C,wBAAwB,CAAGJ,UAAU,CAAGC,WAAW,CACrD,CACAE,aAAa,CAAGC,wBAAwB,CAAGN,iBAAiB,CAC9D,CAAC,IAAM,IACLE,UAAU,GAAKtC,SAAS,EACxBuC,WAAW,GAAKvC,SAAS,EACzBuC,WAAW,CAAGrE,UAAU,CAACI,UAAU,CAAC,CAACqB,KAAK,CAC1C,CACA8C,aAAa,CAAGH,UAAU,CAAGF,iBAAiB,CAChD,CAEAlE,UAAU,CAACI,UAAU,CAAC,CAACqB,KAAK,CAAG8C,aAAa,CAC5CpC,kBAAkB,CAAC,CAAC,CACtB,CACE;AACF,QAAS,CAAA6B,sBAAsBA,CAAA,CAAG,CAChC,KAAM,CAAAF,iBAAiB,CAAG,CAAC,GAAG9D,UAAU,CAAC,CACzC8D,iBAAiB,CAAC1D,UAAU,CAAC,CAAC6B,SAAS,CAAG,KAAK,CAC/C,KAAM,CAAAwC,eAAe,CAAGzE,UAAU,CAAC0E,MAAM,CAAE/B,MAAM,EAAK,CAACA,MAAM,CAACV,SAAS,CAAC,CACxEvB,kBAAkB,CAACkC,IAAI,CAAC6B,eAAe,CAAC,CAAC,CAAC,CAAC,CAE3C,KAAM,CAAAE,iBAAiB,CAAG3E,UAAU,CAAC0E,MAAM,CAAE/B,MAAM,EAAKA,MAAM,CAACV,SAAS,CAAC,CACzEE,kBAAkB,CAAC,CAAC,CACpB,KAAM,CAAAyC,eAAe,CACnBxE,UAAU,CAAGuE,iBAAiB,CAACnC,MAAM,CAAG,CAAC,CAAG,CAAC,CAAGpC,UAAU,CAC5DuE,iBAAiB,CAACC,eAAe,CAAC,CAAClD,QAAQ,CAAG,IAAI,CAClDzB,aAAa,CAAC0E,iBAAiB,CAAC,CAChChE,qBAAqB,CAACD,kBAAkB,CAAC,CACzCL,aAAa,CAACD,UAAU,CAAGuE,iBAAiB,CAACnC,MAAM,CAAG,CAAC,CAAG,CAAC,CAAGpC,UAAU,CAAC,CACzEd,aAAa,CAACoB,kBAAkB,CAAC,CACnC,CAEA,QAAS,CAAAqD,gBAAgBA,CAAA,CAAG,CAC1B,KAAM,CAAAD,iBAAiB,CAAG,CAAC,GAAG9D,UAAU,CAAC,CACzC8D,iBAAiB,CAAC1D,UAAU,CAAC,CAAC6B,SAAS,CAAG,KAAK,CAE/C,KAAM,CAAA4C,yBAAyB,CAAG,CAAC,GAAGnE,kBAAkB,CAAC,CACzD,KAAM,CAAAoE,uBAAuB,CAAG9E,UAAU,CAAC0E,MAAM,CAC9C/B,MAAM,EAAKA,MAAM,CAAClB,KAAK,GAAK,CAC/B,CAAC,CACD,KAAM,CAAAsD,oBAAoB,CAAG/E,UAAU,CAAC0E,MAAM,CAC3C/B,MAAM,EAAKA,MAAM,CAAClB,KAAK,EAAI,CAC9B,CAAC,CACDoD,yBAAyB,CAACjC,IAAI,CAC5BmC,oBAAoB,CAAC,CAAC,CAAC,CACvBD,uBAAuB,CAAC,CAAC,CAC3B,CAAC,CACDnE,qBAAqB,CAACkE,yBAAyB,CAAC,CAClD,CACA;AACA,QAAS,CAAAG,UAAUA,CAAA,CAAG,CACpB,KAAM,CAAAC,aAAa,CAAG,CAAC,GAAGjF,UAAU,CAAC,CAACkF,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAAC3D,KAAK,CAAG0D,CAAC,CAAC1D,KAAK,CAAC,CACvE,KAAM,CAAAoD,yBAAyB,CAAG,CAAC,GAAGnE,kBAAkB,CAAE,GAAGuE,aAAa,CAAC,CAC3EtE,qBAAqB,CAACkE,yBAAyB,CAAC,CAClD,CAEA,QAAS,CAAAQ,UAAUA,CAAA,CAAG,CACpB,GAAI7E,OAAO,CAACgC,MAAM,CAAG,CAAC,CAAE,CACtB,KAAM,CAAA8C,UAAU,CAAG,CAAC,GAAG9E,OAAO,CAAC,CAC/B,KAAM,CAAA+E,SAAS,CAAGD,UAAU,CAACE,GAAG,CAAC,CAAC,CAClC7E,qBAAqB,CAAC4E,SAAS,CAAC7E,kBAAkB,CAAC,CACnDT,aAAa,CAACsF,SAAS,CAACvF,UAAU,CAAC,CACnCH,cAAc,CAAC0F,SAAS,CAAC3F,WAAW,CAAC,CACrCO,aAAa,CAACoF,SAAS,CAACrF,UAAU,CAAC,CACnCG,aAAa,CAACkF,SAAS,CAACnF,UAAU,CAAC,CACnCL,cAAc,CAACwF,SAAS,CAACzF,WAAW,CAAC,CACrCW,UAAU,CAAC6E,UAAU,CAAC,CACtBzC,SAAS,CAAC5B,eAAe,CAAC,CAC5B,CACF,CAEAhD,SAAS,CAAC,IAAM,CACdiD,oBAAoB,CAAC,CAAC,CACxB,CAAC,CAAE,EAAE,CAAC,CAENjD,SAAS,CAAC,IAAM,CACd,GAAIiC,UAAU,GAAK,CAAC,EAAI,CAACI,aAAa,CAAE,CACtC6B,kBAAkB,CAAC,CAAC,CACtB,CACF,CAAC,CAAE,CAACjC,UAAU,CAAEI,aAAa,CAAC,CAAC,CAE/BrC,SAAS,CAAC,IAAM,CACd,GAAIyC,kBAAkB,CAAC8B,MAAM,GAAKnD,OAAO,CAACmD,MAAM,CAAE,CAChDlD,aAAa,CAACoB,kBAAkB,CAAC,CACjCjB,cAAc,CAACe,OAAO,CAAC,CACvBb,QAAQ,CAAC,UAAU,CAAC,CACpB,GAAIN,OAAO,CAACmD,MAAM,GAAK,CAAC,CAAE,CACxBK,SAAS,CAAC7B,cAAc,CAAC,CAC3B,CACF,CACF,CAAC,CAAE,CAACN,kBAAkB,CAAC8B,MAAM,CAAEnD,OAAO,CAACmD,MAAM,CAAC,CAAC,CAE/CvE,SAAS,CAAC,IAAM,CACd,GAAI,CAAC+B,UAAU,EAAIA,UAAU,CAACwC,MAAM,GAAK,CAAC,CAAE,OAE5C,GAAIpC,UAAU,GAAK,CAAC,EAAIA,UAAU,CAAG,CAAC,GAAKJ,UAAU,CAACwC,MAAM,CAAE,CAC5D,KAAM,CAAAG,MAAM,CAAG8C,QAAQ,CAACC,cAAc,CAAC,YAAYtF,UAAU,EAAE,CAAC,CAChEuC,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEgD,cAAc,CAAC,CACrBC,QAAQ,CAAE,QACZ,CAAC,CAAC,CACJ,CAAC,IAAM,IAAIxF,UAAU,GAAK,CAAC,CAAE,CAC3ByF,MAAM,CAACC,MAAM,CAAC,CACZC,GAAG,CAAE,CAAC,CACNH,QAAQ,CAAE,QACZ,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACxF,UAAU,CAAEJ,UAAU,CAACwC,MAAM,CAAC,CAAC,CAEnCvE,SAAS,CAAC,IAAM,CACd,GAAIsB,eAAe,GAAK,IAAI,CAAE,CAC5BkB,UAAU,CAACf,WAAW,CAAC,CACvBF,kBAAkB,CAAC,KAAK,CAAC,CACzBqB,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CACF,CAAC,CAAE,CAACtB,eAAe,CAAC,CAAC,CAErBtB,SAAS,CAAC,IAAM,CACd,GAAI2C,eAAe,GAAK,IAAI,CAAE,CAC5ByE,UAAU,CAAC,CAAC,CACZxE,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CACF,CAAC,CAAE,CAACD,eAAe,CAAC,CAAC,CAErB,mBACE/B,KAAA,CAAAE,SAAA,EAAAiH,QAAA,eACErH,IAAA,CAACP,OAAO,EAAC6H,SAAS,CAAC,YAAY,CAACC,MAAM,CAAE5F,aAAc,CAAA0F,QAAA,cACpDnH,KAAA,QAAKoH,SAAS,CAAC,mBAAmB,CAAAD,QAAA,eAChCrH,IAAA,MAAGsH,SAAS,CAAC,gBAAgB,CAAAD,QAAA,CAAC,gBAAc,CAAG,CAAC,cAChDnH,KAAA,QAAAmH,QAAA,eACErH,IAAA,CAACN,MAAM,EACL8H,KAAK,CAAC,QAAQ,CACdC,MAAM,MACNC,WAAW,CAAErB,UAAW,CACxBsB,IAAI,CAAC,WAAW,CAChBC,UAAU,CAAE,IAAK,CAClB,CAAC,cACF5H,IAAA,CAACN,MAAM,EACL8H,KAAK,CAAC,UAAU,CAChBE,WAAW,CAAEA,CAAA,GAAM,CACjBrC,sBAAsB,CAAC,CAAC,CACxBzD,gBAAgB,CAAC,KAAK,CAAC,CACzB,CAAE,CACF+F,IAAI,CAAC,SAAS,CACf,CAAC,cACF3H,IAAA,CAACH,UAAU,EACTgI,IAAI,CAAE/H,IAAK,CACX0H,KAAK,CAAC,YAAY,CAClBE,WAAW,CAAEA,CAAA,GAAM,CACjB9F,gBAAgB,CAAC,KAAK,CAAC,CACvB8E,UAAU,CAAC,CAAC,CACd,CAAE,CACFY,SAAS,CAAC,WAAW,CACtB,CAAC,EACC,CAAC,EACH,CAAC,CACC,CAAC,cACVtH,IAAA,QAAKsH,SAAS,CAAC,gBAAgB,CAAAD,QAAA,cAC7BrH,IAAA,CAACZ,IAAI,EAAC0I,EAAE,CAAC,GAAG,CAACR,SAAS,CAAC,KAAK,CAAAD,QAAA,cAC1BrH,IAAA,QAAK+H,GAAG,CAAE5I,IAAK,CAAC6I,GAAG,CAAC,cAAc,CAAE,CAAC,CACjC,CAAC,CACJ,CAAC,cACN9H,KAAA,QAAKoH,SAAS,CAAC,yBAAyB,CAAAD,QAAA,eACtCrH,IAAA,CAACR,kBAAkB,EACjByI,OAAO,CAAE5G,UAAW,CACpByB,KAAK,EAAAvC,qBAAA,CAAEc,UAAU,CAACI,UAAU,CAAC,UAAAlB,qBAAA,iBAAtBA,qBAAA,CAAwBuC,KAAM,CACrCoF,KAAK,CAAE/G,WAAY,CACnBoC,MAAM,EAAA/C,sBAAA,CAAEa,UAAU,CAACI,UAAU,CAAC,UAAAjB,sBAAA,iBAAtBA,sBAAA,CAAwB+C,MAAO,CACvChC,UAAU,EAAAd,sBAAA,CAAEY,UAAU,CAACI,UAAU,CAAC,UAAAhB,sBAAA,iBAAtBA,sBAAA,CAAwBc,UAAW,CAChD,CAAC,cACFvB,IAAA,CAACJ,0BAA0B,EAACqI,OAAO,CAAElG,kBAAmB,CAAE,CAAC,EACxD,CAAC,cACN7B,KAAA,QAAKoH,SAAS,CAAC,mBAAmB,CAAAD,QAAA,eAChCrH,IAAA,CAACL,YAAY,EAACwI,KAAK,CAAC,MAAM,CAACT,WAAW,CAAEhB,UAAW,CAAE,CAAC,cACtD1G,IAAA,CAACd,QAAQ,EACPwI,WAAW,CAAGS,KAAK,EACjB1D,WAAW,CAACpD,UAAU,CAACI,UAAU,CAAC,CAAEF,UAAU,CAAE4G,KAAK,CACtD,CACDxG,aAAa,CAAEA,aAAc,CAC9B,CAAC,EACC,CAAC,EACN,CAAC,CAEP,CACA,cAAe,CAAAtB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}