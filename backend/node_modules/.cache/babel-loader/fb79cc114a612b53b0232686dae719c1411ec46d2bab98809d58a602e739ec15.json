{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilias.almerekov\\\\Projects\\\\darts\\\\src\\\\pages\\\\Game\\\\Game.tsx\",\n  _s = $RefreshSig$();\nimport Keyboard from \"../../components/Keyboard/Keyboard\";\nimport \"./game.css\";\nimport Back from \"../../icons/back.svg\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport GamePlayerItemList from \"../../components/GamePlayerItem/GamplayerItemList\";\nimport Overlay from \"../../components/Overlay/Overlay\";\nimport Button from \"../../components/Button/Button\";\nimport NumberButton from \"../../components/Keyboard/NumberButton\";\nimport FinishedGamePlayerItemList from \"../../components/GamePlayerItem/FinishedGamePlayerItemList\";\nimport LinkButton from \"../../components/LinkButton/LinkButton\";\nimport Undo from \"../../icons/undo-copy.svg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Game({\n  players,\n  setWinnerList,\n  undoFromSummary,\n  setUndoFromSummary,\n  setLastHistory,\n  lastHistory\n}) {\n  _s();\n  var _playerList$playerTur, _playerList$playerTur2, _playerList$playerTur3;\n  const navigate = useNavigate();\n  const [playerScore, setPlayerScore] = useState(301);\n  const [roundsCount, setRoundsCount] = useState(1);\n  const [playerList, setPlayerList] = useState([]);\n  const [throwCount, setThrowCount] = useState(0);\n  const [playerTurn, setPlayerTurn] = useState(0);\n  const [isOverlayOpen, setIsOverlayOpen] = useState(false);\n  const [history, setHistory] = useState([]);\n  const [finishedPlayerList, setFinishedPlayerList] = useState([]);\n  const [undoLastHistory, setUndoLastHistory] = useState(false);\n  function initializePlayerList() {\n    const initialPlayerlist = [];\n    players.forEach((user, i) => {\n      const player = {\n        id: user.id,\n        name: user.name,\n        score: playerScore,\n        isActive: i === 0 ? true : false,\n        index: i,\n        rounds: [{\n          throw1: undefined,\n          throw2: undefined,\n          throw3: undefined\n        }],\n        isPlaying: true,\n        isBust: false,\n        throwCount: 0\n      };\n      initialPlayerlist.push(player);\n    });\n    setPlayerList(initialPlayerlist);\n  }\n  function changeActivePlayer() {\n    const prevPlayerTurnIndex = playerTurn;\n    const newPlayerTurnIndex = playerTurn + 1;\n    const newPlayerList = [...playerList];\n    newPlayerList[prevPlayerTurnIndex].isActive = false;\n    const isEndOfArray = newPlayerTurnIndex > newPlayerList.length - 1;\n    const handleNewIndex = isEndOfArray ? 0 : newPlayerTurnIndex;\n    newPlayerList[handleNewIndex].isBust = false;\n    newPlayerList[handleNewIndex].isActive = true;\n    setPlayerList(newPlayerList);\n    setPlayerTurn(handleNewIndex);\n    setThrowCount(0);\n    if (isEndOfArray) {\n      setRoundsCount(roundsCount + 1);\n      newPlayerList.forEach(player => {\n        return player.rounds.push({\n          throw1: undefined,\n          throw2: undefined,\n          throw3: undefined\n        });\n      });\n    }\n  }\n  function playSound(path) {\n    const audio = new Audio(path);\n  }\n  /*\r\n    function playSound(path: string) {\r\n      var audio = new Audio(path);\r\n      audio.play();\r\n      if (path === \"/sounds/throw-sound.mp3\") {\r\n        audio.currentTime = 2.3;\r\n      } else if (path === \"/sounds/undo-sound.mp3\") {\r\n        audio.currentTime = 0.2;\r\n        audio.volume = 0.1;\r\n      }\r\n    }\r\n  */\n  function handleThrow(player, currentThrow, currentScoreAchieved) {\n    setHistory([...history, {\n      finishedPlayerList: JSON.parse(JSON.stringify(finishedPlayerList)),\n      playerList: JSON.parse(JSON.stringify(playerList)),\n      playerScore,\n      throwCount,\n      playerTurn,\n      roundsCount\n    }]);\n    const newScore = playerList[playerTurn].score - currentScoreAchieved;\n    const currentPlayerThrows = playerList[playerTurn].rounds[playerList[playerTurn].rounds.length - 1];\n    switch (currentThrow) {\n      case 0:\n        currentPlayerThrows.throw1 = currentScoreAchieved;\n        break;\n      case 1:\n        currentPlayerThrows.throw2 = currentScoreAchieved;\n        break;\n      case 2:\n        currentPlayerThrows.throw3 = currentScoreAchieved;\n        break;\n      default:\n    }\n    setPlayerScore(newScore);\n    if (currentScoreAchieved > playerList[playerTurn].score) {\n      bust(playerScore);\n      playSound(\"/sounds/error-sound.mp3\");\n    } else {\n      playerList[playerTurn].score = newScore;\n      setThrowCount(currentThrow + 1);\n      playSound(\"/sounds/throw-sound.mp3\");\n    }\n    if (playerList[playerTurn].score === 0) {\n      if (playerList.length === 2) {\n        handleLastPlayer();\n        return finishedPlayerList;\n      } else if (finishedPlayerList.length < 1) {\n        setIsOverlayOpen(true);\n        playSound(\"/sounds/win-sound.mp3\");\n      } else {\n        handleFinishedPlayer();\n        return playerList;\n      }\n      setWinnerList(finishedPlayerList);\n    }\n    const updatedPlayerlist = [...playerList];\n    updatedPlayerlist[playerTurn] = player;\n    setPlayerList(updatedPlayerlist);\n    playerList[playerTurn].throwCount = throwCount;\n  }\n  function bust(bustedPlayerScore) {\n    const currentRoundOfPlayer = playerList[playerTurn].rounds[roundsCount - 1];\n    const firstThrow = currentRoundOfPlayer.throw1;\n    const secondThrow = currentRoundOfPlayer.throw2;\n    const thirdThrow = currentRoundOfPlayer.throw3;\n    let oldThrowScore = playerList[playerTurn].score;\n    playerList[playerTurn].isBust = true;\n    if (thirdThrow) {\n      let firstAndSecondThrowScore = 0;\n      if (firstThrow !== undefined && secondThrow !== undefined) {\n        firstAndSecondThrowScore = firstThrow + secondThrow;\n      }\n      oldThrowScore = firstAndSecondThrowScore + bustedPlayerScore;\n    } else if (firstThrow !== undefined && secondThrow !== undefined && secondThrow > playerList[playerTurn].score) {\n      oldThrowScore = firstThrow + bustedPlayerScore;\n    }\n    playerList[playerTurn].score = oldThrowScore;\n    changeActivePlayer();\n  }\n  function handleFinishedPlayer() {\n    playerList[playerTurn].isPlaying = false;\n    const finishedPlayer = playerList.filter(player => player.isPlaying === false);\n    const finishedPlayers = finishedPlayerList;\n    finishedPlayers.push(finishedPlayer[0]);\n    const unfinishedPlayers = playerList.filter(player => player.isPlaying === true);\n    changeActivePlayer();\n    unfinishedPlayers[playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn].isActive = true;\n    setPlayerList(unfinishedPlayers);\n    setFinishedPlayerList(finishedPlayers);\n    setPlayerTurn(playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn);\n    setWinnerList(finishedPlayerList);\n  }\n  function handleLastPlayer() {\n    playerList[playerTurn].isPlaying = false;\n    const newList = [...finishedPlayerList];\n    const lastPlayer = playerList.filter(player => player.score !== 0);\n    const secondlastPlayer = playerList.filter(player => player.score == 0);\n    newList.push(secondlastPlayer[0], lastPlayer[0]);\n    setFinishedPlayerList(newList);\n  }\n  function sortPlayer() {\n    const scoreArray = [];\n    playerList.forEach(player => {\n      scoreArray.push(player.score);\n    });\n    allPlayersScoreSort(scoreArray);\n    let i = 0;\n    const newList = [...finishedPlayerList];\n    while (i < playerList.length) {\n      playerList.forEach(player => {\n        if (player.score === scoreArray[0]) {\n          scoreArray.splice(0, 1);\n          newList.push(player);\n        }\n      });\n      i += 1;\n    }\n    setFinishedPlayerList(newList);\n  }\n  function allPlayersScoreSort(arr) {\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n          let temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp;\n        }\n      }\n    }\n  }\n  function handleUndo() {\n    if (history.length > 0) {\n      const lastState = history.pop();\n      setFinishedPlayerList(lastState.finishedPlayerList);\n      setPlayerList(lastState.playerList);\n      setPlayerScore(lastState.playerScore);\n      setThrowCount(lastState.throwCount);\n      setPlayerTurn(lastState.playerTurn);\n      setRoundsCount(lastState.roundsCount);\n      setHistory([...history]);\n      playSound(\"/sounds/undo-sound.mp3\");\n    }\n  }\n  useEffect(() => {\n    initializePlayerList();\n  }, []);\n  useEffect(() => {\n    if (throwCount === 3 && !isOverlayOpen) {\n      changeActivePlayer();\n    }\n  }, [throwCount]);\n  useEffect(() => {\n    if (finishedPlayerList.length === players.length) {\n      setWinnerList(finishedPlayerList);\n      setLastHistory(history);\n      navigate(\"/summary\");\n      if (players.length === 2) {\n        playSound(\"/sounds/win-sound.mp3\");\n      }\n    }\n  }, [finishedPlayerList.length, players.length]);\n  useEffect(() => {\n    if (playerTurn === 5) {\n      const player = document.getElementById(\"playerid\");\n      player === null || player === void 0 ? void 0 : player.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    } else if (playerTurn + 1 === playerList.length) {\n      const player = document.getElementById(\"playerid\");\n      player === null || player === void 0 ? void 0 : player.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    } else if (playerTurn === 0) {\n      window.scroll({\n        top: 0,\n        behavior: \"smooth\"\n      });\n    }\n  }, [playerTurn, playerList.length]);\n  useEffect(() => {\n    if (undoFromSummary === true) {\n      setHistory(lastHistory);\n      setUndoFromSummary(false);\n      setUndoLastHistory(true);\n    }\n  }, [undoFromSummary]);\n  useEffect(() => {\n    if (undoLastHistory === true) {\n      handleUndo();\n      setUndoLastHistory(false);\n    }\n  }, [undoLastHistory]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Overlay, {\n      className: \"overlayBox\",\n      isOpen: isOverlayOpen,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finishGameOverlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"overlayHeading\",\n          children: \"Continue Game?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            label: \"Finish\",\n            isLink: true,\n            handleClick: () => sortPlayer(),\n            type: \"secondary\",\n            isInverted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            label: \"Continue\",\n            handleClick: () => {\n              handleFinishedPlayer();\n              setIsOverlayOpen(!isOverlayOpen);\n            },\n            type: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LinkButton, {\n            icon: Undo,\n            label: \"Undo Throw\",\n            handleClick: () => {\n              setIsOverlayOpen(!isOverlayOpen);\n              handleUndo();\n            },\n            className: \"undoThrow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gamePageHeader\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"top\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Back,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gamePlayerItemContainer\",\n      children: [/*#__PURE__*/_jsxDEV(GamePlayerItemList, {\n        userMap: playerList,\n        score: (_playerList$playerTur = playerList[playerTurn]) === null || _playerList$playerTur === void 0 ? void 0 : _playerList$playerTur.score,\n        round: roundsCount,\n        isBust: (_playerList$playerTur2 = playerList[playerTurn]) === null || _playerList$playerTur2 === void 0 ? void 0 : _playerList$playerTur2.isBust,\n        throwCount: (_playerList$playerTur3 = playerList[playerTurn]) === null || _playerList$playerTur3 === void 0 ? void 0 : _playerList$playerTur3.throwCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FinishedGamePlayerItemList, {\n        userMap: finishedPlayerList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-and-undo\",\n      children: [/*#__PURE__*/_jsxDEV(NumberButton, {\n        value: \"Undo\",\n        handleClick: handleUndo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n        handleClick: value => handleThrow(playerList[playerTurn], throwCount, value),\n        isOverlayOpen: isOverlayOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"xfaPDBxoGbwQWhMVYEs4vEwHMk8=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Keyboard","Back","Link","useNavigate","useEffect","useState","GamePlayerItemList","Overlay","Button","NumberButton","FinishedGamePlayerItemList","LinkButton","Undo","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","players","setWinnerList","undoFromSummary","setUndoFromSummary","setLastHistory","lastHistory","_s","_playerList$playerTur","_playerList$playerTur2","_playerList$playerTur3","navigate","playerScore","setPlayerScore","roundsCount","setRoundsCount","playerList","setPlayerList","throwCount","setThrowCount","playerTurn","setPlayerTurn","isOverlayOpen","setIsOverlayOpen","history","setHistory","finishedPlayerList","setFinishedPlayerList","undoLastHistory","setUndoLastHistory","initializePlayerList","initialPlayerlist","forEach","user","i","player","id","name","score","isActive","index","rounds","throw1","undefined","throw2","throw3","isPlaying","isBust","push","changeActivePlayer","prevPlayerTurnIndex","newPlayerTurnIndex","newPlayerList","isEndOfArray","length","handleNewIndex","playSound","path","audio","Audio","handleThrow","currentThrow","currentScoreAchieved","JSON","parse","stringify","newScore","currentPlayerThrows","bust","handleLastPlayer","handleFinishedPlayer","updatedPlayerlist","bustedPlayerScore","currentRoundOfPlayer","firstThrow","secondThrow","thirdThrow","oldThrowScore","firstAndSecondThrowScore","finishedPlayer","filter","finishedPlayers","unfinishedPlayers","newList","lastPlayer","secondlastPlayer","sortPlayer","scoreArray","allPlayersScoreSort","splice","arr","j","temp","handleUndo","lastState","pop","document","getElementById","scrollIntoView","behavior","window","scroll","top","children","className","isOpen","fileName","_jsxFileName","lineNumber","columnNumber","label","isLink","handleClick","type","isInverted","icon","to","src","alt","userMap","round","value","_c","$RefreshReg$"],"sources":["C:/Users/ilias.almerekov/Projects/darts/src/pages/Game/Game.tsx"],"sourcesContent":["import Keyboard from \"../../components/Keyboard/Keyboard\";\r\nimport \"./game.css\";\r\nimport Back from \"../../icons/back.svg\";\r\nimport { Link, Navigate, redirect, useNavigate } from \"react-router-dom\";\r\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport GamePlayerItemList from \"../../components/GamePlayerItem/GamplayerItemList\";\r\nimport Overlay from \"../../components/Overlay/Overlay\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport NumberButton from \"../../components/Keyboard/NumberButton\";\r\nimport FinishedGamePlayerItemList from \"../../components/GamePlayerItem/FinishedGamePlayerItemList\";\r\nimport LinkButton from \"../../components/LinkButton/LinkButton\";\r\nimport Undo from \"../../icons/undo-copy.svg\";\r\nimport { PlayerProps } from \"../Start/Start\";\r\n\r\ntype Props = {\r\n  players: PlayerProps[];\r\n  setWinnerList: Dispatch<SetStateAction<BASIC.PlayerProps[]>>;\r\n  undoFromSummary: boolean;\r\n  setUndoFromSummary: Dispatch<SetStateAction<boolean>>;\r\n  setLastHistory: Dispatch<SetStateAction<any>>;\r\n  lastHistory: any;\r\n};\r\n\r\nfunction Game({\r\n  players,\r\n  setWinnerList,\r\n  undoFromSummary,\r\n  setUndoFromSummary,\r\n  setLastHistory,\r\n  lastHistory,\r\n}: Props) {\r\n  const navigate = useNavigate();\r\n  const [playerScore, setPlayerScore] = useState(301);\r\n  const [roundsCount, setRoundsCount] = useState(1);\r\n  const [playerList, setPlayerList] = useState<BASIC.PlayerProps[]>([]);\r\n  const [throwCount, setThrowCount] = useState(0);\r\n  const [playerTurn, setPlayerTurn] = useState(0);\r\n  const [isOverlayOpen, setIsOverlayOpen] = useState(false);\r\n  const [history, setHistory] = useState<any[]>([]);\r\n  const [finishedPlayerList, setFinishedPlayerList] = useState<\r\n    BASIC.PlayerProps[]\r\n  >([]);\r\n  const [undoLastHistory, setUndoLastHistory] = useState(false);\r\n\r\n  function initializePlayerList() {\r\n    const initialPlayerlist: BASIC.PlayerProps[] = [];\r\n    players.forEach((user: BASIC.UserProps, i: number) => {\r\n      const player = {\r\n        id: user.id,\r\n        name: user.name,\r\n        score: playerScore,\r\n        isActive: i === 0 ? true : false,\r\n        index: i,\r\n        rounds: [{ throw1: undefined, throw2: undefined, throw3: undefined }],\r\n        isPlaying: true,\r\n        isBust: false,\r\n        throwCount: 0,\r\n      };\r\n      initialPlayerlist.push(player);\r\n    });\r\n    setPlayerList(initialPlayerlist);\r\n  }\r\n\r\n  function changeActivePlayer() {\r\n    const prevPlayerTurnIndex = playerTurn;\r\n    const newPlayerTurnIndex = playerTurn + 1;\r\n    const newPlayerList: BASIC.PlayerProps[] = [...playerList];\r\n\r\n    newPlayerList[prevPlayerTurnIndex].isActive = false;\r\n    const isEndOfArray = newPlayerTurnIndex > newPlayerList.length - 1;\r\n    const handleNewIndex = isEndOfArray ? 0 : newPlayerTurnIndex;\r\n    newPlayerList[handleNewIndex].isBust = false;\r\n    newPlayerList[handleNewIndex].isActive = true;\r\n    setPlayerList(newPlayerList);\r\n    setPlayerTurn(handleNewIndex);\r\n    setThrowCount(0);\r\n\r\n    if (isEndOfArray) {\r\n      setRoundsCount(roundsCount + 1);\r\n      newPlayerList.forEach((player) => {\r\n        return player.rounds.push({\r\n          throw1: undefined,\r\n          throw2: undefined,\r\n          throw3: undefined,\r\n        });\r\n      });\r\n    }\r\n  }\r\n  function playSound(path: string) {\r\n    const audio = new Audio(path);\r\n  }\r\n/*\r\n  function playSound(path: string) {\r\n    var audio = new Audio(path);\r\n    audio.play();\r\n    if (path === \"/sounds/throw-sound.mp3\") {\r\n      audio.currentTime = 2.3;\r\n    } else if (path === \"/sounds/undo-sound.mp3\") {\r\n      audio.currentTime = 0.2;\r\n      audio.volume = 0.1;\r\n    }\r\n  }\r\n*/\r\n  function handleThrow(\r\n    player: BASIC.PlayerProps,\r\n    currentThrow: number,\r\n    currentScoreAchieved: number | any\r\n  ) {\r\n    setHistory([\r\n      ...history,\r\n      {\r\n        finishedPlayerList: JSON.parse(JSON.stringify(finishedPlayerList)),\r\n        playerList: JSON.parse(JSON.stringify(playerList)),\r\n        playerScore,\r\n        throwCount,\r\n        playerTurn,\r\n        roundsCount,\r\n      },\r\n    ]);\r\n\r\n    const newScore = playerList[playerTurn].score - currentScoreAchieved;\r\n    const currentPlayerThrows =\r\n      playerList[playerTurn].rounds[playerList[playerTurn].rounds.length - 1];\r\n    switch (currentThrow) {\r\n      case 0:\r\n        currentPlayerThrows.throw1 = currentScoreAchieved as unknown as number;\r\n        break;\r\n      case 1:\r\n        currentPlayerThrows.throw2 = currentScoreAchieved as unknown as number;\r\n        break;\r\n      case 2:\r\n        currentPlayerThrows.throw3 = currentScoreAchieved as unknown as number;\r\n        break;\r\n      default:\r\n    }\r\n    setPlayerScore(newScore);\r\n\r\n    if (currentScoreAchieved > playerList[playerTurn].score) {\r\n      bust(playerScore);\r\n      playSound(\"/sounds/error-sound.mp3\");\r\n    } else {\r\n      playerList[playerTurn].score = newScore;\r\n      setThrowCount(currentThrow + 1);\r\n      playSound(\"/sounds/throw-sound.mp3\");\r\n    }\r\n    if (playerList[playerTurn].score === 0) {\r\n      if (playerList.length === 2) {\r\n        handleLastPlayer();\r\n        return finishedPlayerList;\r\n      } else if (finishedPlayerList.length < 1) {\r\n        setIsOverlayOpen(true);\r\n        playSound(\"/sounds/win-sound.mp3\");\r\n      } else {\r\n        handleFinishedPlayer();\r\n        return playerList;\r\n      }\r\n      setWinnerList(finishedPlayerList);\r\n    }\r\n    const updatedPlayerlist = [...playerList];\r\n    updatedPlayerlist[playerTurn] = player;\r\n    setPlayerList(updatedPlayerlist);\r\n    playerList[playerTurn].throwCount = throwCount;\r\n  }\r\n\r\n  function bust(bustedPlayerScore: number) {\r\n    const currentRoundOfPlayer = playerList[playerTurn].rounds[roundsCount - 1];\r\n    const firstThrow = currentRoundOfPlayer.throw1;\r\n    const secondThrow = currentRoundOfPlayer.throw2;\r\n    const thirdThrow = currentRoundOfPlayer.throw3;\r\n    let oldThrowScore = playerList[playerTurn].score;\r\n    playerList[playerTurn].isBust = true;\r\n\r\n    if (thirdThrow) {\r\n      let firstAndSecondThrowScore = 0;\r\n      if (firstThrow !== undefined && secondThrow !== undefined) {\r\n        firstAndSecondThrowScore = firstThrow + secondThrow;\r\n      }\r\n      oldThrowScore = firstAndSecondThrowScore + bustedPlayerScore;\r\n    } else if (\r\n      firstThrow !== undefined &&\r\n      secondThrow !== undefined &&\r\n      secondThrow > playerList[playerTurn].score\r\n    ) {\r\n      oldThrowScore = firstThrow + bustedPlayerScore;\r\n    }\r\n\r\n    playerList[playerTurn].score = oldThrowScore;\r\n    changeActivePlayer();\r\n  }\r\n\r\n  function handleFinishedPlayer() {\r\n    playerList[playerTurn].isPlaying = false;\r\n    const finishedPlayer = playerList.filter(\r\n      (player) => player.isPlaying === false\r\n    );\r\n    const finishedPlayers = finishedPlayerList;\r\n    finishedPlayers.push(finishedPlayer[0]);\r\n    const unfinishedPlayers = playerList.filter(\r\n      (player) => player.isPlaying === true\r\n    );\r\n    changeActivePlayer();\r\n    unfinishedPlayers[\r\n      playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn\r\n    ].isActive = true;\r\n    setPlayerList(unfinishedPlayers);\r\n    setFinishedPlayerList(finishedPlayers);\r\n    setPlayerTurn(playerTurn > unfinishedPlayers.length - 1 ? 0 : playerTurn);\r\n    setWinnerList(finishedPlayerList);\r\n  }\r\n\r\n  function handleLastPlayer() {\r\n    playerList[playerTurn].isPlaying = false;\r\n    const newList = [...finishedPlayerList];\r\n    const lastPlayer = playerList.filter((player) => player.score !== 0);\r\n    const secondlastPlayer = playerList.filter((player) => player.score == 0);\r\n    newList.push(secondlastPlayer[0], lastPlayer[0]);\r\n    setFinishedPlayerList(newList);\r\n  }\r\n\r\n  function sortPlayer() {\r\n    const scoreArray: number[] = [];\r\n    playerList.forEach((player) => {\r\n      scoreArray.push(player.score);\r\n    });\r\n\r\n    allPlayersScoreSort(scoreArray);\r\n\r\n    let i = 0;\r\n    const newList = [...finishedPlayerList];\r\n\r\n    while (i < playerList.length) {\r\n      playerList.forEach((player) => {\r\n        if (player.score === scoreArray[0]) {\r\n          scoreArray.splice(0, 1);\r\n          newList.push(player);\r\n        }\r\n      });\r\n      i += 1;\r\n    }\r\n    setFinishedPlayerList(newList);\r\n  }\r\n\r\n  function allPlayersScoreSort(arr: number[]) {\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0; j < arr.length - i - 1; j++) {\r\n        if (arr[j] > arr[j + 1]) {\r\n          let temp = arr[j];\r\n          arr[j] = arr[j + 1];\r\n          arr[j + 1] = temp;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleUndo() {\r\n    if (history.length > 0) {\r\n      const lastState = history.pop();\r\n      setFinishedPlayerList(lastState.finishedPlayerList);\r\n      setPlayerList(lastState.playerList);\r\n      setPlayerScore(lastState.playerScore);\r\n      setThrowCount(lastState.throwCount);\r\n      setPlayerTurn(lastState.playerTurn);\r\n      setRoundsCount(lastState.roundsCount);\r\n      setHistory([...history]);\r\n      playSound(\"/sounds/undo-sound.mp3\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    initializePlayerList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (throwCount === 3 && !isOverlayOpen) {\r\n      changeActivePlayer();\r\n    }\r\n  }, [throwCount]);\r\n\r\n  useEffect(() => {\r\n    if (finishedPlayerList.length === players.length) {\r\n      setWinnerList(finishedPlayerList);\r\n      setLastHistory(history);\r\n      navigate(\"/summary\");\r\n      if (players.length === 2) {\r\n        playSound(\"/sounds/win-sound.mp3\");\r\n      }\r\n    }\r\n  }, [finishedPlayerList.length, players.length]);\r\n\r\n  useEffect(() => {\r\n    if (playerTurn === 5) {\r\n      const player = document.getElementById(\"playerid\");\r\n      player?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      });\r\n    } else if (playerTurn + 1 === playerList.length) {\r\n      const player = document.getElementById(\"playerid\");\r\n      player?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      });\r\n    } else if (playerTurn === 0) {\r\n      window.scroll({\r\n        top: 0,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }, [playerTurn, playerList.length]);\r\n\r\n  useEffect(() => {\r\n    if (undoFromSummary === true) {\r\n      setHistory(lastHistory);\r\n      setUndoFromSummary(false);\r\n      setUndoLastHistory(true);\r\n    }\r\n  }, [undoFromSummary]);\r\n\r\n  useEffect(() => {\r\n    if (undoLastHistory === true) {\r\n      handleUndo();\r\n      setUndoLastHistory(false);\r\n    }\r\n  }, [undoLastHistory]);\r\n\r\n  return (\r\n    <>\r\n      <Overlay className=\"overlayBox\" isOpen={isOverlayOpen}>\r\n        <div className=\"finishGameOverlay\">\r\n          <p className=\"overlayHeading\">Continue Game?</p>\r\n          <div>\r\n            <Button\r\n              label=\"Finish\"\r\n              isLink\r\n              handleClick={() => sortPlayer()}\r\n              type=\"secondary\"\r\n              isInverted={true}\r\n            />\r\n            <Button\r\n              label=\"Continue\"\r\n              handleClick={() => {\r\n                handleFinishedPlayer();\r\n                setIsOverlayOpen(!isOverlayOpen);\r\n              }}\r\n              type=\"primary\"\r\n            />\r\n            <LinkButton\r\n              icon={Undo}\r\n              label=\"Undo Throw\"\r\n              handleClick={() => {\r\n                setIsOverlayOpen(!isOverlayOpen);\r\n                handleUndo();\r\n              }}\r\n              className=\"undoThrow\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Overlay>\r\n      <div className=\"gamePageHeader\">\r\n        <Link to=\"/\" className=\"top\">\r\n          <img src={Back} alt=\"\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"gamePlayerItemContainer\">\r\n        <GamePlayerItemList\r\n          userMap={playerList}\r\n          score={playerList[playerTurn]?.score}\r\n          round={roundsCount}\r\n          isBust={playerList[playerTurn]?.isBust}\r\n          throwCount={playerList[playerTurn]?.throwCount}\r\n        />\r\n        <FinishedGamePlayerItemList userMap={finishedPlayerList} />\r\n      </div>\r\n      <div className=\"keyboard-and-undo\">\r\n        <NumberButton value=\"Undo\" handleClick={handleUndo} />\r\n        <Keyboard\r\n          handleClick={(value) =>\r\n            handleThrow(playerList[playerTurn], throwCount, value)\r\n          }\r\n          isOverlayOpen={isOverlayOpen}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}